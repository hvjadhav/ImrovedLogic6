<?xml version="1.0" encoding="UTF-8"?>
<cofluent:Application xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cofluent="http://cofluent.intel.com/cofluent/1.0.0" xmi:id="_iIZz0PlDEeuZqOfdZrWBTg" name="TestAppPlt" version="8.1.0_r1_447" target="" initializations="RoutingTable.Input[0] = &quot;Decoding_Routing&quot;;&#xD;&#xA;RoutingTable.Input[1] = &quot;Scaling_Routing&quot;;&#xD;&#xA;RoutingTable.Output[0] = &quot;Routing_AtomQuad0&quot;;&#xD;&#xA;RoutingTable.Output[1] = &quot;Routing_AtomQuad1&quot;;&#xD;&#xA;RoutingTable.Output[2] = &quot;Routing_BigCore0&quot;;&#xD;&#xA;RoutingTable.Output[3] = &quot;Routing_BigCore1&quot;;&#xD;&#xA;&#xD;&#xA;//Memory variables&#xD;&#xA;total_cache_access = 0;&#xD;&#xA;total_cache_read_access = 0;&#xD;&#xA;total_cache_hit = 0;&#xD;&#xA;total_cache_miss = 0;&#xD;&#xA;total_cache_write_access = 0;&#xD;&#xA;total_cache_write_merged = 0;&#xD;&#xA;total_cache_write_not_merged = 0;&#xD;&#xA;total_memory_access = 0;&#xD;&#xA;total_slow_memory_access = 0;&#xD;&#xA;total_average_memory_access = 0;&#xD;&#xA;total_fast_memory_access = 0;" includeInheritedHeader="" inheritanceClass="" callToInheritedConstructors="" cyclePeriod="10 ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM" globalTypeDeclarations="#define SCHEDULER_MODEL_PATH&#x9;&quot;/TestAppPlt/Application/scheduler&quot;&#xD;&#xA;&#xD;&#xA;typedef struct&#xD;&#xA;{&#xD;&#xA;const char* Input[2];&#xD;&#xA;const char* Output[4];&#xD;&#xA;} DefRoutingTable;&#xD;&#xA;&#xD;&#xA;#define PRODUCER_FUNCTION_ID&#x9;&#x9;0&#xD;&#xA;#define DECODING_ID&#x9;&#x9;&#x9;&#x9;    10&#xD;&#xA;#define SCALING_ID&#x9;&#x9;&#x9;&#x9;    15&#xD;&#xA;#define ATOMQUAD0_ID&#x9;&#x9;&#x9;&#x9;100&#xD;&#xA;#define ATOMQUAD1_ID&#x9;&#x9;&#x9;&#x9;150&#xD;&#xA;#define BIGCORE0_ID&#x9;&#x9;&#x9;&#x9;    160&#xD;&#xA;#define BIGCORE1_ID&#x9;&#x9;            170&#xD;&#xA;#define GT_ID&#x9;                    300&#xD;&#xA;#define LLC_MEMORY_FUNCTION_ID&#x9;    400&#xD;&#xA;#define OUTPUT_FUNCTION_ID&#x9;&#x9;&#x9;500&#xD;&#xA;#define DIAPLY_ID&#x9;&#x9;&#x9;        600&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;#define WRITE_REQ                   0&#xD;&#xA;#define READ_REQ                    1" globalDeclarations="extern DefRoutingTable RoutingTable;&#xD;&#xA;&#xD;&#xA;//Memory variables&#xD;&#xA;extern int total_cache_access;&#xD;&#xA;extern int total_cache_read_access;&#xD;&#xA;extern int total_cache_hit;&#xD;&#xA;extern int total_cache_miss;&#xD;&#xA;extern int total_cache_write_access;&#xD;&#xA;extern int total_cache_write_merged;&#xD;&#xA;extern int total_cache_write_not_merged;&#xD;&#xA;extern int total_memory_access;&#xD;&#xA;extern int total_slow_memory_access;&#xD;&#xA;extern int total_average_memory_access;&#xD;&#xA;extern int total_fast_memory_access;" globalDefinitions="DefRoutingTable RoutingTable;&#xD;&#xA;&#xD;&#xA;//Memory variables&#xD;&#xA;int total_cache_access;&#xD;&#xA;int total_cache_read_access;&#xD;&#xA;int total_cache_hit;&#xD;&#xA;int total_cache_miss;&#xD;&#xA;int total_cache_write_access;&#xD;&#xA;int total_cache_write_merged;&#xD;&#xA;int total_cache_write_not_merged;&#xD;&#xA;int total_memory_access;&#xD;&#xA;int total_slow_memory_access;&#xD;&#xA;int total_average_memory_access;&#xD;&#xA;int total_fast_memory_access;">
  <annotations xmi:id="_MRtDgPnWEeuZqOfdZrWBTg" source="cdt.configurations">
    <details xmi:id="_QjDTsB2sEe2p5_jMl7Ycdw" key="cofluent.managedbuild.config.msvc2019.exe.release.38835134" value="cdt.configuration.active"/>
  </annotations>
  <dataTypes xmi:id="_SRBYgPlQEeuZqOfdZrWBTg" name="DefPacket" definition="typedef struct{&#xD;&#xA;int source;&#xD;&#xA;int plf_source;&#xD;&#xA;int destination;&#xD;&#xA;cf_dt::cf_time time_stamp; // Time when the frame was generated by the camera&#xD;&#xA;int packet_type;&#xD;&#xA;int num_of_objects;&#xD;&#xA;int addr;&#xD;&#xA;}DefPacket;" copyPayload="cf_payload::cb_copy_payload(_address, _value, _atom_count);" allocatePayload="r = cf_payload::cb_alloc_payload(_atom_count);" deallocatePayload="cf_payload::cb_delete_payload(_address);"/>
  <dataTypes xmi:id="_oWYtIPlQEeuZqOfdZrWBTg" name="req_type" definition="struct req_type&#xD;&#xA;{&#xD;&#xA;int function_id;&#xD;&#xA;int priority;&#xD;&#xA;int core_nb;&#xD;&#xA;};" copyPayload="cf_payload::cb_copy_payload(_address, _value, _atom_count);" allocatePayload="r = cf_payload::cb_alloc_payload(_atom_count);" deallocatePayload="cf_payload::cb_delete_payload(_address);"/>
  <dataTypes xmi:id="_zQ1C8C29EeyjjNodrQ5ZTQ" name="DefNotification" definition="typedef struct&#xD;&#xA;{&#xD;&#xA;int addr;&#xD;&#xA;}DefNotification;" copyPayload="cf_payload::cb_copy_payload(_address, _value, _atom_count);" allocatePayload="r = cf_payload::cb_alloc_payload(_atom_count);" deallocatePayload="cf_payload::cb_delete_payload(_address);"/>
  <designParameters xsi:type="cofluent:PrimitiveTypeParameter" xmi:id="_gAYkIPlTEeuZqOfdZrWBTg" name="DECODING_MAPPED_CORE" default="0" visibility="PUBLIC" accessRight="READ_WRITE" value="1" type="INTEGER"/>
  <designParameters xsi:type="cofluent:RangeParameter" xmi:id="_MEZnwPlcEeuZqOfdZrWBTg" name="SCHEDULER_FUNCTION_MAPPED_NUMBER" documentation="Number of functions mapped on the scheduler" default="0" visibility="PUBLIC" accessRight="READ_WRITE" rangeLimits="_hRs2YQv8EeyQhoUON9k0yg" value="10" type="INTEGER" min="0" max="1000" step="1"/>
  <designParameters xsi:type="cofluent:RangeParameter" xmi:id="__buMkPn2EeuZqOfdZrWBTg" name="SCHEDULER_NUMBER_OF_CORE" documentation="&lt;p>Scheduler number of CPUs&lt;/p>&#xA;" default="4" visibility="PUBLIC" accessRight="READ_WRITE" value="2" type="INTEGER" min="1" max="32" step="1"/>
  <designParameters xsi:type="cofluent:EnumerationParameter" xmi:id="_eZELMPt7EeuZqOfdZrWBTg" name="SCHEDULER_POLICY" documentation="&lt;p>Policy of the scheduler&lt;/p>&#xA;" default="PRIORITY_PREAMPTIVE" visibility="PUBLIC" accessRight="READ_WRITE" value="PRIORITY_PREAMPTIVE">
    <values>PRIORITY_NON_PREAMPTIVE</values>
    <values>PRIORITY_PREAMPTIVE</values>
    <values>TIME_SHARING</values>
  </designParameters>
  <designParameters xsi:type="cofluent:PrimitiveTypeParameter" xmi:id="_VEAHQAv4EeyQhoUON9k0yg" name="FILTERING_MAPPED_CORE" default="0" visibility="PUBLIC" accessRight="READ_WRITE" value="0" type="INTEGER"/>
  <designParameters xsi:type="cofluent:RangeParameter" xmi:id="_8evzUAv4EeyQhoUON9k0yg" name="DECODING_FUNCTION_NUMBER" documentation="&lt;p>Number of decoding functions used in the system&lt;/p>" default="1" visibility="PUBLIC" accessRight="READ_WRITE" value="1" type="INTEGER" min="1" max="100" step="1"/>
  <designParameters xsi:type="cofluent:EnumerationParameter" xmi:id="_IT-pkEcNEeyrdaEjPOedsw" name="BUS_POLICY" default="FIFO_BUS" visibility="PUBLIC" accessRight="READ_WRITE">
    <values>FIFO_BUS</values>
    <values>ALTERNATIVE_BUS</values>
    <values>PRIORITY_BUS</values>
  </designParameters>
  <designParameters xsi:type="cofluent:BooleanParameter" xmi:id="_yzLTYEc0EeyrdaEjPOedsw" name="CACHE_MEMORY_ENABLE" default="false" visibility="PUBLIC" accessRight="READ_WRITE"/>
  <designParameters xsi:type="cofluent:PrimitiveTypeParameter" xmi:id="_AoAVMEc1EeyrdaEjPOedsw" name="CACHE_MEMORY_HIT_DELAY" default="100" visibility="PUBLIC" accessRight="READ_WRITE" internalUnit="NS" type="INTEGER"/>
  <designParameters xsi:type="cofluent:PrimitiveTypeParameter" xmi:id="_eqQA0Ec1EeyrdaEjPOedsw" name="CACHE_MEMORY_HIT_RATIO" documentation="0 means 0% hit -> 100 means 100% hit ratio" default="20" visibility="PUBLIC" accessRight="READ_WRITE" type="INTEGER"/>
  <designParameters xsi:type="cofluent:PrimitiveTypeParameter" xmi:id="_noiKcEc1EeyrdaEjPOedsw" name="CACHE_MEMORY_LOOKUP_LATENCY" default="100" visibility="PUBLIC" accessRight="READ_WRITE" internalUnit="FS" type="INTEGER"/>
  <designParameters xsi:type="cofluent:PrimitiveTypeParameter" xmi:id="_xlaDQEc1EeyrdaEjPOedsw" name="CACHE_MEMORY_MERGE_DELAY" default="200" visibility="PUBLIC" accessRight="READ_WRITE" internalUnit="NS" type="INTEGER"/>
  <designParameters xsi:type="cofluent:PrimitiveTypeParameter" xmi:id="_j5PYwEc2EeyrdaEjPOedsw" name="MEMORY_WRITE_MERGE_RATIO" documentation="0 means 0% merge and 100 means 100% merge" default="20" visibility="PUBLIC" accessRight="READ_WRITE" type="INTEGER"/>
  <designParameters xsi:type="cofluent:EnumerationParameter" xmi:id="_xRdXEEc2EeyrdaEjPOedsw" name="PHY_LAYER_POLICY" default="FIFO" visibility="PUBLIC" accessRight="READ_WRITE">
    <values>FIFO</values>
    <values>ALTERNATIVE</values>
    <values>PRIORITY</values>
  </designParameters>
  <designParameters xsi:type="cofluent:RangeParameter" xmi:id="_bgA_MJNBEeygm5gxz1ASbg" name="LOG_LEVEL" documentation="Console messages print can be adjusted with log level" default="0" visibility="PUBLIC" accessRight="READ_WRITE" value="0" type="INTEGER" min="0" max="5" step="1"/>
  <refinement xsi:type="cofluent:Structure" xmi:id="_iIZz0flDEeuZqOfdZrWBTg" name="TestAppPltSt">
    <models xsi:type="cofluent:Function" xmi:id="_jkuA0PlDEeuZqOfdZrWBTg" name="Application" target="" includeInheritedHeader="" inheritanceClass="" callToInheritedConstructors="" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
      <ports xmi:id="_a9iTIPlEEeuZqOfdZrWBTg" name="MsgQ" type="MESSAGE_QUEUE" direction="IN" relations="_Uu60wPlEEeuZqOfdZrWBTg" ports="_cLKj4PlEEeuZqOfdZrWBTg" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
        <constructorArguments></constructorArguments>
        <templateArguments></templateArguments>
      </ports>
      <ports xmi:id="_gILzEPlEEeuZqOfdZrWBTg" name="MsgQ2" type="MESSAGE_QUEUE" direction="OUT" relations="_ZEPPMPlEEeuZqOfdZrWBTg" ports="_lGoDAPlEEeuZqOfdZrWBTg" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
        <constructorArguments></constructorArguments>
        <templateArguments></templateArguments>
      </ports>
      <ports xmi:id="_C6BGwC9dEeyUlZFKI80e2g" name="Decoding_Routing" type="MESSAGE_QUEUE" direction="OUT" relations="_AienoC9dEeyUlZFKI80e2g" ports="_StmUQC9dEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
        <constructorArguments></constructorArguments>
        <templateArguments></templateArguments>
      </ports>
      <ports xmi:id="_tx9sEDBmEeyUlZFKI80e2g" name="Scaling_Routing" type="MESSAGE_QUEUE" direction="OUT" relations="_qtZu6TBmEeyUlZFKI80e2g" ports="_z2rnkDBmEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
        <constructorArguments></constructorArguments>
        <templateArguments></templateArguments>
      </ports>
      <refinement xsi:type="cofluent:Structure" xmi:id="_A46ToPlEEeuZqOfdZrWBTg" name="ApplicationSt">
        <models xsi:type="cofluent:Function" xmi:id="_Bdau4PlEEeuZqOfdZrWBTg" name="Decoding" includes="#include &quot;cfm_scheduler.h&quot;" declarations="cfm_scheduler* sifce;&#xD;&#xA;&#xD;&#xA;int function_id;&#xD;&#xA;int function_core;&#xD;&#xA;int function_priority;" initializations="function_id = 0+get_cp_index();&#xD;&#xA;function_core = DECODING_MAPPED_CORE.get_value();&#xD;&#xA;function_priority = 0;&#xD;&#xA;&#xD;&#xA;//sifce = (cfm_scheduler*)cf_get_component(&quot;/TestAppPlt/Application/scheduler&quot;);" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
          <ports xmi:id="_cLKj4PlEEeuZqOfdZrWBTg" name="MsgQ" type="MESSAGE_QUEUE" direction="IN" inputActions="_Bdau5flEEeuZqOfdZrWBTg" port="_a9iTIPlEEeuZqOfdZrWBTg" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <ports xmi:id="_cfRysPlEEeuZqOfdZrWBTg" name="MsgQ1" type="MESSAGE_QUEUE" direction="OUT" outputActions="_Bdau5vlEEeuZqOfdZrWBTg" relations="_WXhxUPlEEeuZqOfdZrWBTg" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <ports xmi:id="_StmUQC9dEeyUlZFKI80e2g" name="Decoding_Routing" type="MESSAGE_QUEUE" direction="OUT" outputActions="_1vfWIOzNEeyk8YlLdndsRA _X6smwPGmEey589cEUAf0Nw" port="_C6BGwC9dEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <refinement xsi:type="cofluent:Behavior" xmi:id="_Bdau4flEEeuZqOfdZrWBTg" name="DecodingBh" firstStatement="_Bdau4vlEEeuZqOfdZrWBTg">
            <statements xsi:type="cofluent:Operation" xmi:id="_Bdau4vlEEeuZqOfdZrWBTg" name="init" isFirstOf="_Bdau4flEEeuZqOfdZrWBTg" next="_Bdau4_lEEeuZqOfdZrWBTg" algorithm="sifce = (cfm_scheduler*)cf_get_component(&quot;/TestAppPlt/Application/scheduler&quot;);" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:LoopStatement" xmi:id="_Bdau4_lEEeuZqOfdZrWBTg" name="Loop" firstStatement="_Bdau5flEEeuZqOfdZrWBTg" lastStatement="_Bdau5vlEEeuZqOfdZrWBTg" previous="_Bdau4vlEEeuZqOfdZrWBTg" condition=""/>
            <statements xsi:type="cofluent:Operation" xmi:id="_Bdau5PlEEeuZqOfdZrWBTg" name="process" previous="_X6smwPGmEey589cEUAf0Nw" next="_1vfWIOzNEeyk8YlLdndsRA" algorithm="if (LOG_LEVEL == 2){&#xD;&#xA;cf_trace_report(&quot;%s - in process block&quot;, get_cp_name().c_str());&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Send Write Request &#xD;&#xA;Decoding_Routing.packet_type = WRITE_REQ;&#xD;&#xA;Decoding_Routing.time_stamp = cf_time_stamp();&#xD;&#xA;Decoding_Routing_trans.set_time_stamp_now();&#xD;&#xA;Decoding_Routing_trans.set_user_data_length(cf_dt::cf_data_size(64,CF_BYTE));" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:InputAction" xmi:id="_Bdau5flEEeuZqOfdZrWBTg" name="InAction" isFirstOf="_Bdau4_lEEeuZqOfdZrWBTg" next="_N8d3kOwKEeyk8YlLdndsRA" port="_cLKj4PlEEeuZqOfdZrWBTg" timeout=" ns" priority="" duration=" ns" vectorSize="" blocking="true" condition=""/>
            <statements xsi:type="cofluent:OutputAction" xmi:id="_Bdau5vlEEeuZqOfdZrWBTg" name="OutAction" isLastOf="_Bdau4_lEEeuZqOfdZrWBTg" previous="_lvMd4PlPEeuZqOfdZrWBTg" port="_cfRysPlEEeuZqOfdZrWBTg" duration=" ns" condition="" priority="" vectorSize="" blocking="true" call=""/>
            <statements xsi:type="cofluent:Operation" xmi:id="_lgvLIPlPEeuZqOfdZrWBTg" name="request_core" previous="_N8d3kOwKEeyk8YlLdndsRA" next="_X6smwPGmEey589cEUAf0Nw" algorithm="&#xD;&#xA;cf_trace_report(&quot;%s requesting core&quot;, get_cp_name().c_str());&#xD;&#xA;&#xD;&#xA;// request core&#xD;&#xA;std::string function_name = get_hcp_name();&#xD;&#xA;//cf_trace_report(&quot;function_name: %s&quot;,function_name.c_str());&#xD;&#xA;sifce->request_core(function_id, function_priority, function_name);&#xD;&#xA;&#xD;&#xA;sifce->wait_ack(function_id); &#xD;&#xA;if (LOG_LEVEL == 1){&#xD;&#xA;cf_trace_report(&quot;%s ack received&quot;,get_cp_name().c_str());&#xD;&#xA;}" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:Operation" xmi:id="_lvMd4PlPEeuZqOfdZrWBTg" name="release_core" previous="_olrbgDgIEeyiyOB-O-9_Fg" next="_Bdau5vlEEeuZqOfdZrWBTg" algorithm="&#xD;&#xA;cf_trace_report(&quot;releasing core by Decoding&quot;);&#xD;&#xA;&#xD;&#xA;// release core&#xD;&#xA;sifce->release_core(function_id);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" executionTime="0 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:Operation" xmi:id="_olrbgDgIEeyiyOB-O-9_Fg" name="wait" previous="_1vfWIOzNEeyk8YlLdndsRA" next="_lvMd4PlPEeuZqOfdZrWBTg" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:Operation" xmi:id="_N8d3kOwKEeyk8YlLdndsRA" name="get_data" previous="_Bdau5flEEeuZqOfdZrWBTg" next="_lgvLIPlPEeuZqOfdZrWBTg" algorithm="// Sending Read Request&#xD;&#xA;Decoding_Routing.source = DECODING_ID;&#xD;&#xA;Decoding_Routing.destination = LLC_MEMORY_FUNCTION_ID;&#xD;&#xA;Decoding_Routing.packet_type = READ_REQ;&#xD;&#xA;Decoding_Routing.time_stamp = cf_time_stamp();&#xD;&#xA;Decoding_Routing_trans.set_time_stamp_now();&#xD;&#xA;Decoding_Routing_trans.set_user_data_length(cf_dt::cf_data_size(64,CF_BYTE));" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:OutputAction" xmi:id="_1vfWIOzNEeyk8YlLdndsRA" name="OutAction2" previous="_Bdau5PlEEeuZqOfdZrWBTg" next="_olrbgDgIEeyiyOB-O-9_Fg" port="_StmUQC9dEeyUlZFKI80e2g" duration=" ns" condition="" priority="" vectorSize="" blocking="true" call=""/>
            <statements xsi:type="cofluent:OutputAction" xmi:id="_X6smwPGmEey589cEUAf0Nw" name="OutAction3" documentation="" previous="_lgvLIPlPEeuZqOfdZrWBTg" next="_Bdau5PlEEeuZqOfdZrWBTg" port="_StmUQC9dEeyUlZFKI80e2g" duration=" ns" condition="" priority="" vectorSize="" blocking="true" call=""/>
          </refinement>
        </models>
        <models xsi:type="cofluent:Function" xmi:id="_MiHLYPlEEeuZqOfdZrWBTg" name="Scaling" includes="#include &quot;cfm_scheduler.h&quot;" declarations="cfm_scheduler* sifce;&#xD;&#xA;&#xD;&#xA;int function_id;&#xD;&#xA;int function_core;&#xD;&#xA;int function_priority;" initializations="function_id = DECODING_FUNCTION_NUMBER.get_value()+1;&#xD;&#xA;//function_id = 0+get_cp_index();&#xD;&#xA;function_core = FILTERING_MAPPED_CORE.get_value();&#xD;&#xA;//function_core = DECODING_MAPPED_CORE.get_value();&#xD;&#xA;function_priority = 0;" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
          <ports xmi:id="_czZokPlEEeuZqOfdZrWBTg" name="MsgQ1" type="MESSAGE_QUEUE" direction="IN" inputActions="_MiHLZflEEeuZqOfdZrWBTg" relations="_WXhxUPlEEeuZqOfdZrWBTg" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <ports xmi:id="_lGoDAPlEEeuZqOfdZrWBTg" name="MsgQ2" type="MESSAGE_QUEUE" direction="OUT" outputActions="_MiHLZvlEEeuZqOfdZrWBTg" port="_gILzEPlEEeuZqOfdZrWBTg" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <ports xmi:id="_z2rnkDBmEeyUlZFKI80e2g" name="Scaling_Routing" type="MESSAGE_QUEUE" direction="OUT" outputActions="_2EDQ4OzNEeyk8YlLdndsRA _akIHIPGmEey589cEUAf0Nw" port="_tx9sEDBmEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <refinement xsi:type="cofluent:Behavior" xmi:id="_MiHLYflEEeuZqOfdZrWBTg" name="ScalingBh" firstStatement="_MiHLYvlEEeuZqOfdZrWBTg">
            <statements xsi:type="cofluent:Operation" xmi:id="_MiHLYvlEEeuZqOfdZrWBTg" name="init" isFirstOf="_MiHLYflEEeuZqOfdZrWBTg" next="_MiHLY_lEEeuZqOfdZrWBTg" algorithm="sifce = (cfm_scheduler*)cf_get_component(&quot;/TestAppPlt/Application/scheduler&quot;);" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:LoopStatement" xmi:id="_MiHLY_lEEeuZqOfdZrWBTg" name="Loop" firstStatement="_MiHLZflEEeuZqOfdZrWBTg" lastStatement="_MiHLZvlEEeuZqOfdZrWBTg" previous="_MiHLYvlEEeuZqOfdZrWBTg" condition=""/>
            <statements xsi:type="cofluent:Operation" xmi:id="_MiHLZPlEEeuZqOfdZrWBTg" name="process" previous="_akIHIPGmEey589cEUAf0Nw" next="_2EDQ4OzNEeyk8YlLdndsRA" algorithm="if (LOG_LEVEL == 2){&#xD;&#xA;cf_trace_report(&quot;%s - in process block&quot;, get_cp_name().c_str());&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Send Write Request &#xD;&#xA;Scaling_Routing.packet_type = WRITE_REQ;&#xD;&#xA;Scaling_Routing.time_stamp = cf_time_stamp();&#xD;&#xA;Scaling_Routing_trans.set_time_stamp_now();&#xD;&#xA;Scaling_Routing_trans.set_user_data_length(cf_dt::cf_data_size(64,CF_BYTE));&#xD;&#xA;//Scaling_Routing.destination = DISPLAY_ID;" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:InputAction" xmi:id="_MiHLZflEEeuZqOfdZrWBTg" name="InAction" isFirstOf="_MiHLY_lEEeuZqOfdZrWBTg" next="_oMa9VOwKEeyk8YlLdndsRA" port="_czZokPlEEeuZqOfdZrWBTg" timeout=" ns" priority="" duration=" ns" vectorSize="" blocking="true" condition=""/>
            <statements xsi:type="cofluent:OutputAction" xmi:id="_MiHLZvlEEeuZqOfdZrWBTg" name="OutAction" isLastOf="_MiHLY_lEEeuZqOfdZrWBTg" previous="_xr6ukPlPEeuZqOfdZrWBTg" port="_lGoDAPlEEeuZqOfdZrWBTg" duration=" ns" condition="" priority="" vectorSize="" blocking="true" call=""/>
            <statements xsi:type="cofluent:Operation" xmi:id="_uVV0UPlPEeuZqOfdZrWBTg" name="request_core" previous="_oMa9VOwKEeyk8YlLdndsRA" next="_akIHIPGmEey589cEUAf0Nw" algorithm="&#xD;&#xA;cf_trace_report(&quot;%s requesting core&quot;, get_cp_name().c_str());&#xD;&#xA;&#xD;&#xA;// request core&#xD;&#xA;std::string function_name = get_hcp_name();&#xD;&#xA;//cf_trace_report(&quot;function_name: %s&quot;,function_name.c_str());&#xD;&#xA;sifce->request_core(function_id, function_priority, function_name);&#xD;&#xA;&#xD;&#xA;sifce->wait_ack(function_id); &#xD;&#xA;&#xD;&#xA;cf_trace_report(&quot;%s ack received&quot;,get_cp_name().c_str());&#xD;&#xA;" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:Operation" xmi:id="_xr6ukPlPEeuZqOfdZrWBTg" name="release_core" previous="_rnF-EDgIEeyiyOB-O-9_Fg" next="_MiHLZvlEEeuZqOfdZrWBTg" algorithm="&#xD;&#xA;cf_trace_report(&quot;releasing core by Scaling&quot;);&#xD;&#xA;&#xD;&#xA;// release core&#xD;&#xA;sifce->release_core(function_id);" executionTime="0 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:Operation" xmi:id="_rnF-EDgIEeyiyOB-O-9_Fg" name="wait" previous="_2EDQ4OzNEeyk8YlLdndsRA" next="_xr6ukPlPEeuZqOfdZrWBTg" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:Operation" xmi:id="_oMa9VOwKEeyk8YlLdndsRA" name="get_data" previous="_MiHLZflEEeuZqOfdZrWBTg" next="_uVV0UPlPEeuZqOfdZrWBTg" algorithm="// Sending Read Request&#xD;&#xA;Scaling_Routing.source = SCALING_ID;&#xD;&#xA;Scaling_Routing.destination = LLC_MEMORY_FUNCTION_ID;&#xD;&#xA;Scaling_Routing.packet_type = READ_REQ;&#xD;&#xA;Scaling_Routing.time_stamp = cf_time_stamp();&#xD;&#xA;Scaling_Routing_trans.set_time_stamp_now();&#xD;&#xA;Scaling_Routing_trans.set_user_data_length(cf_dt::cf_data_size(64,CF_BYTE));" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:OutputAction" xmi:id="_2EDQ4OzNEeyk8YlLdndsRA" name="OutAction2" previous="_MiHLZPlEEeuZqOfdZrWBTg" next="_rnF-EDgIEeyiyOB-O-9_Fg" port="_z2rnkDBmEeyUlZFKI80e2g" duration=" ns" condition="" priority="" vectorSize="" blocking="true" call=""/>
            <statements xsi:type="cofluent:OutputAction" xmi:id="_akIHIPGmEey589cEUAf0Nw" name="OutAction3" previous="_uVV0UPlPEeuZqOfdZrWBTg" next="_MiHLZPlEEeuZqOfdZrWBTg" port="_z2rnkDBmEeyUlZFKI80e2g" duration=" ns" condition="" priority="" vectorSize="" blocking="true" call=""/>
          </refinement>
        </models>
        <models xsi:type="cofluent:Function" xmi:id="_5Tx30PlPEeuZqOfdZrWBTg" name="scheduler" includes="#include &quot;cfm_scheduler.h&quot;&#xD;&#xA;" target="" declarations="public:&#xD;&#xA;&#x9;void request_core(int function_id, int priority, std::string function_path);&#xD;&#xA;&#x9;void wait_ack(int function_id);&#xD;&#xA;&#x9;void release_core(int function_id);" definitions="void cfm_scheduler::request_core(int function_id, int priority, std::string function_path)&#xD;&#xA;{&#xD;&#xA;&#x9;if (LOG_LEVEL == 2){&#xD;&#xA;&#x9;cf_trace_report(&quot;***** REACHED scheduler to request core ******&quot;);&#xD;&#xA;&#x9;}&#xD;&#xA;//&#x9;cf_trace_report(&quot;function_id: %d&quot;, function_id);&#xD;&#xA;//&#x9;cf_trace_report(&quot;priority: %d&quot;, priority);&#xD;&#xA;//&#x9;cf_trace_report(&quot;function_path: %s&quot;, function_path.c_str());&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;//sched_if->r_test(function_id, priority);&#xD;&#xA;&#x9;//sched_if->test_method(function_id, priority, function_path);&#xD;&#xA;&#x9;sched_if->r_core(function_id, priority, function_path);&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;//sched_if->r_core(function_id, priority);&#xD;&#xA;&#x9;//cf_trace_report(&quot;***** EXIT scheduler ******&quot;);&#xD;&#xA;&#x9;&#xD;&#xA;}&#xD;&#xA;&#x9;&#xD;&#xA;void cfm_scheduler::wait_ack(int function_id)&#xD;&#xA;{&#xD;&#xA;&#x9;sched_if->w_ack(function_id);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;void cfm_scheduler::release_core(int function_id)&#xD;&#xA;{&#xD;&#xA;&#x9;if (LOG_LEVEL == 2){&#xD;&#xA;&#x9;cf_trace_report(&quot;***** REACHED scheduler to release core ******&quot;);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;sched_if->rel_core(function_id);&#xD;&#xA;}" includeInheritedHeader="" inheritanceClass="" callToInheritedConstructors="" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
          <designParameters xsi:type="cofluent:PrimitiveTypeParameter" xmi:id="_t0DxkAzqEeyQhoUON9k0yg" name="SCHEDULER_CONTEXT_SWITCH_TIME" documentation="Time required by the scheduler to switch the context" default="10" visibility="PUBLIC" accessRight="READ_WRITE" internalUnit="NS" type="INTEGER"/>
          <refinement xsi:type="cofluent:Structure" xmi:id="_GcMfkPlQEeuZqOfdZrWBTg" name="schedulerSt">
            <models xsi:type="cofluent:Function" xmi:id="_GcMfkflQEeuZqOfdZrWBTg" name="sched_if" includes="#include &quot;cfm_scheduling_function.h&quot;&#xD;&#xA;#include &lt;iostream>&#xD;&#xA;#include &lt;string>" target="" declarations="cfm_scheduling_function* scheduling_function_ptr;&#xD;&#xA;cf_core::cf_payload_int* transaction_ptr;&#xD;&#xA;&#xD;&#xA;std::vector&lt;std::string> function_path_vect;&#xD;&#xA;std::string scheduling_function_path;&#xD;&#xA;std::string scheduler_path;&#xD;&#xA;std::string path;&#xD;&#xA;&#xD;&#xA;public:&#xD;&#xA;&#x9;void r_core( int function_id, int priority, std::string function_path);&#xD;&#xA;&#x9;void r_core_test( int function_id, int priority, std::string function_path);&#xD;&#xA;&#x9;void w_ack( int function_id );&#xD;&#xA;&#x9;void rel_core( int function_id );&#xD;&#xA;//&#x9;void r_test(int function_id, int priority);&#xD;&#xA;&#x9;void test_method ( int function_id, int priority, std::string function_path);" definitions="void cfm_sched_if::r_core(int function_id, int priority, std::string function_path)&#xD;&#xA;{&#xD;&#xA;&#x9;if (LOG_LEVEL == 2){&#xD;&#xA;&#x9;cf_trace_report(&quot;**** REACHED r_core method *****&quot;);&#xD;&#xA;&#x9;}&#xD;&#xA;//&#x9;cf_trace_report(&quot;function_id: %d&quot;, function_id);&#xD;&#xA;//&#x9;cf_trace_report(&quot;priority: %d&quot;, priority);&#xD;&#xA;//&#x9;cf_trace_report(&quot;function_path: %s&quot;, function_path.c_str());&#xD;&#xA;&#x9;// Take the semaphore&#xD;&#xA;&#x9;p_sv_sem_scheduler_access.read(&amp;sem_scheduler_access_trans);&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;req.function_id = function_id;&#xD;&#xA;&#x9;req.priority = priority;&#xD;&#xA;&#x9;req.core_nb = -1;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;//cf_trace_report(&quot;function_path = %s&quot;, function_path.c_str());&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;//Send the component path to the core mutex function&#xD;&#xA;&#x9;function_path_vect[function_id] = function_path;&#xD;&#xA;&#x9;scheduling_function_path = &quot;/scheduling_function&quot;;&#xD;&#xA;&#x9;path = scheduler_path + scheduling_function_path;&#xD;&#xA;&#xD;&#xA;//&#x9;cf_trace_report(&quot;scheduler_path = %s&quot;, scheduler_path.c_str());&#xD;&#xA;&#x9;//cf_trace_report(&quot;path = %s&quot;, path.c_str());&#xD;&#xA;//&#x9;&#xD;&#xA;&#x9;scheduling_function_ptr = (cfm_scheduling_function*)cf_get_component(path);&#xD;&#xA;&#x9;scheduling_function_ptr->get_function_path(function_path_vect);&#xD;&#xA;&#xD;&#xA;&#x9;//send transaction&#xD;&#xA;&#x9;p_mq_req.send(&amp;req_trans);&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;//release the semaphore&#xD;&#xA;&#x9;p_sv_sem_scheduler_access.write(&amp;sem_scheduler_access_trans);&#xD;&#xA;&#x9;if (LOG_LEVEL == 2){&#xD;&#xA;&#x9;cf_trace_report(&quot;**** FINISHED r_core method *****&quot;);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;void cfm_sched_if::rel_core(int function_id)&#xD;&#xA;{&#xD;&#xA;&#x9;//Take the semaphore&#xD;&#xA;&#x9;if (LOG_LEVEL == 2){&#xD;&#xA;&#x9;cf_trace_report(&quot;**** REACHED rel_core method *****&quot;);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;p_sv_sem_scheduler_access.read(&amp;sem_scheduler_access_trans);&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;rel = function_id;&#xD;&#xA;&#x9;p_mq_rel.send(&amp;rel_trans);&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;//release the semaphore&#xD;&#xA;&#x9;p_sv_sem_scheduler_access.write(&amp;sem_scheduler_access_trans);&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;if( p_mq_rel.get_message_queue().get_msg_count() > 0)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;//Peek the message index 1, index 0 is the first message&#xD;&#xA;&#x9;&#x9;transaction_ptr = p_mq_rel.get_message_queue().peek(0);&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;//Display the content of the transaction&#xD;&#xA;&#x9;&#x9;if (LOG_LEVEL == 2){&#xD;&#xA;&#x9;&#x9;cf_trace_report(&quot;Msg 0 = %d&quot;, transaction_ptr->get_data());&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (LOG_LEVEL == 2){&#xD;&#xA;&#x9;cf_trace_report(&quot;**** FINISHED rel_core method *****&quot;);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;void cfm_sched_if::w_ack( int function_id )&#xD;&#xA;{&#xD;&#xA;&#x9;p_mq_ack.set_selector_index( function_id );&#xD;&#xA;&#x9;p_mq_ack.receive( &amp;ack_trans );&#xD;&#xA;}&#xD;&#xA;" initializations="scheduler_path = SCHEDULER_MODEL_PATH;&#xD;&#xA;&#xD;&#xA;for(int i=0; i&lt;=4; i++)&#xD;&#xA;{&#xD;&#xA;&#x9;function_path_vect.push_back(&quot;&quot;);&#xD;&#xA;}" includeInheritedHeader="" inheritanceClass="" callToInheritedConstructors="" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
              <ports xmi:id="_14lG0PlQEeuZqOfdZrWBTg" name="sem_scheduler_access" type="SHARED_VARIABLE" direction="IN" relations="_vY_NMPlQEeuZqOfdZrWBTg" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                <constructorArguments></constructorArguments>
                <templateArguments></templateArguments>
              </ports>
              <ports xmi:id="_tA5swPlWEeuZqOfdZrWBTg" name="req" type="MESSAGE_QUEUE" direction="OUT" relations="_gYxWUPlQEeuZqOfdZrWBTg" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                <constructorArguments></constructorArguments>
                <templateArguments></templateArguments>
              </ports>
              <ports xmi:id="_v1O1kPlWEeuZqOfdZrWBTg" name="rel" type="MESSAGE_QUEUE" direction="OUT" relations="_g52DEPlQEeuZqOfdZrWBTg" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                <constructorArguments></constructorArguments>
                <templateArguments></templateArguments>
              </ports>
              <ports xmi:id="_x4tJMPlWEeuZqOfdZrWBTg" name="ack" type="MESSAGE_QUEUE" direction="IN" relations="_gqpwgPlQEeuZqOfdZrWBTg" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                <constructorArguments></constructorArguments>
                <templateArguments></templateArguments>
              </ports>
              <refinement xsi:type="cofluent:Behavior" xmi:id="_0WkSwPlWEeuZqOfdZrWBTg" name="sched_ifBh" firstStatement="_0Wk50PlWEeuZqOfdZrWBTg">
                <statements xsi:type="cofluent:Operation" xmi:id="_0Wk50PlWEeuZqOfdZrWBTg" name="nop" isFirstOf="_0WkSwPlWEeuZqOfdZrWBTg" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
              </refinement>
            </models>
            <models xsi:type="cofluent:Function" xmi:id="_JfZx4PlQEeuZqOfdZrWBTg" name="scheduling_function" includes="//#include &quot;cfm_cores.h&quot;" target="" declarations="cf_core::cf_payload_int* transaction_ptr_update_req_list2;&#xD;&#xA;&#xD;&#xA;#define FUNCTION_OVER -1&#xD;&#xA;&#xD;&#xA;struct{&#xD;&#xA;bool state; //true means the core is available&#xD;&#xA;int function_executed_id;&#xD;&#xA;int function_executed_priority;&#xD;&#xA;int function_to_execute_req_id;&#xD;&#xA;cf_dt::cf_time cpu_total_active_time;&#xD;&#xA;cf_dt::cf_time cpu_last_activation_time;&#xD;&#xA;} core[100];&#xD;&#xA;&#xD;&#xA;bool core_available;&#xD;&#xA;bool start_core;&#xD;&#xA;bool ack_cond;&#xD;&#xA;&#xD;&#xA;std::vector&lt;std::string> function_path_vector;&#xD;&#xA;&#xD;&#xA;int request_number;&#xD;&#xA;int number_of_cores;&#xD;&#xA;&#xD;&#xA;bool function_not_running;&#xD;&#xA;int function_not_running_nb;&#xD;&#xA;int function_executed_req_id;&#xD;&#xA;int function_to_execute_req_id;&#xD;&#xA;&#xD;&#xA;int request_list_highest_priority;&#xD;&#xA;int executed_function_to_stop_req_id;&#xD;&#xA;int previous_executed_function_id;&#xD;&#xA;&#xD;&#xA;cf_core::cf_beh_handle* function_beh;&#xD;&#xA;cf_dt::cf_time executed_function_start_time;&#xD;&#xA;&#xD;&#xA;std::string core_path;&#xD;&#xA;std::string scheduler_path;&#xD;&#xA;std::string path;&#xD;&#xA;&#xD;&#xA;cf_dt::cf_time process_req_time;&#xD;&#xA;cf_dt::cf_time context_switch_time_var;&#xD;&#xA;&#xD;&#xA;typedef enum&#xD;&#xA;{&#xD;&#xA;&#x9;not_started,&#xD;&#xA;&#x9;to_be_started,&#xD;&#xA;&#x9;started,&#xD;&#xA;&#x9;to_be_stopped,&#xD;&#xA;&#x9;stopped,&#xD;&#xA;&#x9;resumed,&#xD;&#xA;&#x9;to_be_resumed&#xD;&#xA;} Deffunction_state;&#xD;&#xA;&#xD;&#xA;typedef struct&#xD;&#xA;{&#xD;&#xA;&#x9;int req_id;&#xD;&#xA;&#x9;int priority;&#xD;&#xA;&#x9;int core_nb;&#xD;&#xA;&#x9;std::string function_path;&#xD;&#xA;&#x9;int function_id;&#xD;&#xA;&#x9;Deffunction_state function_state;&#xD;&#xA;&#x9;cf_dt::cf_time last_time_executed;&#xD;&#xA;} Deffunction_type;&#xD;&#xA;&#xD;&#xA;Deffunction_type request_list[1000];&#xD;&#xA;&#xD;&#xA;public:&#xD;&#xA;&#x9;void get_function_path(std::vector&lt;std::string> function_path_vect);&#xD;&#xA;" definitions="void cfm_scheduling_function::get_function_path(std::vector&lt;std::string>function_path_vect)&#xD;&#xA;{&#xD;&#xA;&#x9;this->function_path_vector = function_path_vect;&#xD;&#xA;}" initializations="function_not_running = false;&#xD;&#xA;function_not_running_nb = 0;&#xD;&#xA;function_executed_req_id = 0;&#xD;&#xA;function_to_execute_req_id = 0;&#xD;&#xA;previous_executed_function_id = -1;&#xD;&#xA;&#xD;&#xA;request_list_highest_priority = 0;&#xD;&#xA;executed_function_to_stop_req_id = -1;&#xD;&#xA;&#xD;&#xA;scheduler_path = SCHEDULER_MODEL_PATH;&#xD;&#xA;&#xD;&#xA;number_of_cores = SCHEDULER_NUMBER_OF_CORE.get_value();&#xD;&#xA;&#xD;&#xA;process_req_time = cf_dt::cf_time(0,CF_US);&#xD;&#xA;context_switch_time_var = SCHEDULER_CONTEXT_SWITCH_TIME.get_value();&#xD;&#xA;&#xD;&#xA;for (int i=0; i&lt;number_of_cores; i++)&#xD;&#xA;{&#xD;&#xA;&#x9;core[i].state = true; //true means the core is available&#xD;&#xA;&#x9;core[i].function_executed_id = -1;&#xD;&#xA;&#x9;core[i].function_executed_priority = -1;&#xD;&#xA;&#x9;core[i].function_to_execute_req_id = -1;&#xD;&#xA;&#x9;core[i].cpu_total_active_time = cf_dt::cf_time(0,CF_SEC);&#xD;&#xA;&#x9;core[i].cpu_last_activation_time = cf_dt::cf_time(0,CF_SEC);&#xD;&#xA;}&#xD;&#xA;core_available = false;&#xD;&#xA;start_core = false;&#xD;&#xA;ack_cond = false;&#xD;&#xA;&#xD;&#xA;executed_function_start_time = cf_dt::cf_time(0,CF_US);&#xD;&#xA;&#xD;&#xA;for(int i=0; i&lt;5; i++)&#xD;&#xA;{&#xD;&#xA;&#x9;function_path_vector.push_back(&quot;null&quot;);&#xD;&#xA;}" includeInheritedHeader="" inheritanceClass="" callToInheritedConstructors="" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
              <ports xmi:id="_taLIYPlWEeuZqOfdZrWBTg" name="req" type="MESSAGE_QUEUE" direction="IN" inputActions="_VGXd4PlkEeuZqOfdZrWBTg" relations="_gYxWUPlQEeuZqOfdZrWBTg" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                <constructorArguments></constructorArguments>
                <templateArguments></templateArguments>
              </ports>
              <ports xmi:id="_wAUEMPlWEeuZqOfdZrWBTg" name="rel" type="MESSAGE_QUEUE" direction="IN" inputActions="_a-dgkAqlEeyQhoUON9k0yg" relations="_g52DEPlQEeuZqOfdZrWBTg" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                <constructorArguments></constructorArguments>
                <templateArguments></templateArguments>
              </ports>
              <ports xmi:id="_xqdR0PlWEeuZqOfdZrWBTg" name="ack" type="MESSAGE_QUEUE" direction="OUT" outputSelectorOutputs="_FlnBQBqLEeykeN24kl0UTA" relations="_gqpwgPlQEeuZqOfdZrWBTg" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                <constructorArguments></constructorArguments>
                <templateArguments></templateArguments>
              </ports>
              <ports xmi:id="_udmJYPq4EeuZqOfdZrWBTg" name="start_core0" type="MESSAGE_QUEUE" direction="OUT" outputSelectorOutputs="_khpeMB2uEe2p5_jMl7Ycdw" relations="_rmA4QPq4EeuZqOfdZrWBTg" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                <constructorArguments></constructorArguments>
                <templateArguments></templateArguments>
              </ports>
              <refinement xsi:type="cofluent:Behavior" xmi:id="_R6BdsPlkEeuZqOfdZrWBTg" name="scheduling_functionBh" firstStatement="_R6D58PlkEeuZqOfdZrWBTg">
                <selectors xsi:type="cofluent:MultiInstancesOutputSelector" xmi:id="_DEYaoBqLEeykeN24kl0UTA" name="InstanceOutSelector2" instanceNumber="request_list[core[Loop2_index].function_to_execute_req_id].function_id" outputAction="_8vqwwBqJEeykeN24kl0UTA">
                  <output xmi:id="_FlnBQBqLEeykeN24kl0UTA" name="OutputSelectorOutput" port="_xqdR0PlWEeuZqOfdZrWBTg"/>
                </selectors>
                <selectors xsi:type="cofluent:MultiInstancesOutputSelector" xmi:id="_awvk0B2uEe2p5_jMl7Ycdw" name="InstanceOutSelector" instanceNumber="Loop2_index" outputAction="_qhEksCFgEeyOKdR4z820wQ">
                  <output xmi:id="_khpeMB2uEe2p5_jMl7Ycdw" name="OutputSelectorOutput" port="_udmJYPq4EeuZqOfdZrWBTg"/>
                </selectors>
                <statements xsi:type="cofluent:Operation" xmi:id="_R6D58PlkEeuZqOfdZrWBTg" name="init" isFirstOf="_R6BdsPlkEeuZqOfdZrWBTg" next="_UII7EPlkEeuZqOfdZrWBTg" algorithm="//cf_trace_report(&quot;scheduling_function INIT&quot;);" executionTime="0 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                <statements xsi:type="cofluent:LoopStatement" xmi:id="_UII7EPlkEeuZqOfdZrWBTg" name="Loop" firstStatement="_q5AWkAv2EeyQhoUON9k0yg" lastStatement="_OAx0wAv7EeyQhoUON9k0yg" previous="_R6D58PlkEeuZqOfdZrWBTg"/>
                <statements xsi:type="cofluent:InputAction" xmi:id="_VGXd4PlkEeuZqOfdZrWBTg" name="InAction" isFirstOf="_NN9lIAqlEeyQhoUON9k0yg" next="_WXDpsPlkEeuZqOfdZrWBTg" port="_taLIYPlWEeuZqOfdZrWBTg" timeout=" ns" priority="" duration=" ns" vectorSize="" blocking="true" condition=""/>
                <statements xsi:type="cofluent:Operation" xmi:id="_WXDpsPlkEeuZqOfdZrWBTg" name="update_req_list" isLastOf="_NN9lIAqlEeyQhoUON9k0yg" previous="_VGXd4PlkEeuZqOfdZrWBTg" algorithm="if (LOG_LEVEL == 2){&#xD;&#xA;cf_trace_report(&quot;**** REACHED update_req_list *****&quot;);&#xD;&#xA;}&#xD;&#xA;if (LOG_LEVEL == 1){&#xD;&#xA;cf_trace_report(&quot;scheduler, request received from function %d, function path %s&quot;, req.function_id, function_path_vector[req.function_id].c_str());&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;request_list[request_number].req_id             = request_number;&#xD;&#xA;request_list[request_number].function_id        = req.function_id;&#xD;&#xA;request_list[request_number].priority           = req.priority;&#xD;&#xA;request_list[request_number].core_nb            = req.core_nb;&#xD;&#xA;request_list[request_number].function_path      = function_path_vector[req.function_id];&#xD;&#xA;request_list[request_number].function_state     = not_started;&#xD;&#xA;&#xD;&#xA;if(req.core_nb >= number_of_cores)&#xD;&#xA;{&#xD;&#xA;&#x9;cf_trace_report(&quot;Warning, function %d is mapped on a non existing core (core[%d]), will be executed by an available core&quot;, req.function_id, req.core_nb);&#xD;&#xA;&#x9;request_list[request_number].core_nb = -1;&#xD;&#xA;}&#xD;&#xA;request_number++;" executionTime="0 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                <statements xsi:type="cofluent:Operation" xmi:id="_Y1DWIPlkEeuZqOfdZrWBTg" name="check_req_list" previous="_9Td3UAqkEeyQhoUON9k0yg" next="_apnrEPlkEeuZqOfdZrWBTg" algorithm="if (LOG_LEVEL == 2){&#xD;&#xA;cf_trace_report(&quot;**** REACHED check_req_list *****&quot;);&#xD;&#xA;}&#xD;&#xA;//Init variable&#xD;&#xA;&#x9;function_not_running = false;&#xD;&#xA;&#x9;function_not_running_nb = 0;&#xD;&#xA;// Display content of the request list&#xD;&#xA;//cf_trace_report(&quot;request number: %d&quot;, request_number);&#xD;&#xA;//for (int i=0; i&lt;)&#xD;&#xA;for (int i=0; i&lt;request_number; i++)&#xD;&#xA;{&#xD;&#xA;&#x9;switch(request_list[i].function_state)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;case not_started: &#xD;&#xA;&#x9;&#x9;if (LOG_LEVEL == 3){&#xD;&#xA;&#x9;&#x9;cf_trace_report(&quot;req[%d]: function_id=%d, priority=%d, req_id=%d, core_nb = %d, state = not_started&quot;,i, request_list[i].function_id, request_list[i].priority, &#xD;&#xA;&#x9;&#x9;request_list[i].req_id, request_list[i].core_nb);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;case started:&#xD;&#xA;&#x9;&#x9;if (LOG_LEVEL == 3){&#xD;&#xA;&#x9;&#x9;cf_trace_report(&quot;req[%d]: function_id=%d, priority=%d, req_id=%d, core_nb = %d, state = started&quot;,i, request_list[i].function_id, request_list[i].priority, &#xD;&#xA;&#x9;&#x9;request_list[i].req_id, request_list[i].core_nb);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;case to_be_started:&#xD;&#xA;&#x9;&#x9;if (LOG_LEVEL == 3){&#xD;&#xA;&#x9;&#x9;cf_trace_report(&quot;req[%d]: function_id=%d, priority=%d, req_id=%d, core_nb = %d, state = to_be_started&quot;,i, request_list[i].function_id, request_list[i].priority, &#xD;&#xA;&#x9;&#x9;request_list[i].req_id, request_list[i].core_nb);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;case stopped:&#xD;&#xA;&#x9;&#x9;if (LOG_LEVEL == 3){&#xD;&#xA;&#x9;&#x9;cf_trace_report(&quot;req[%d]: function_id=%d, priority=%d, req_id=%d, core_nb = %d, state = stopped&quot;,i, request_list[i].function_id, request_list[i].priority, &#xD;&#xA;&#x9;&#x9;request_list[i].req_id, request_list[i].core_nb);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;case resumed:&#xD;&#xA;&#x9;&#x9;if (LOG_LEVEL == 3){&#xD;&#xA;&#x9;&#x9;cf_trace_report(&quot;req[%d]: function_id=%d, priority=%d, req_id=%d, core_nb = %d, state = resumed&quot;,i, request_list[i].function_id, request_list[i].priority, &#xD;&#xA;&#x9;&#x9;request_list[i].req_id, request_list[i].core_nb);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;case to_be_resumed:&#xD;&#xA;&#x9;&#x9;if (LOG_LEVEL == 3){&#xD;&#xA;&#x9;&#x9;cf_trace_report(&quot;req[%d]: function_id=%d, priority=%d, req_id=%d, core_nb = %d, state = to_be_resumed&quot;,i, request_list[i].function_id, request_list[i].priority, &#xD;&#xA;&#x9;&#x9;request_list[i].req_id, request_list[i].core_nb);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;break;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (request_list[i].function_state != started &amp;&amp; request_list[i].function_state != resumed )&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;function_not_running = true;&#xD;&#xA;&#x9;&#x9;function_not_running_nb++;&#xD;&#xA;&#x9;&#x9;cf_trace_report(&quot;function_id = %d, req_id = %d is not started nor resumed&quot;, request_list[i].function_id, request_list[i].req_id);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;if (function_not_running)&#xD;&#xA;{&#xD;&#xA;&#x9;cf_trace_report(&quot;%d function(s) in the request list not running&quot;, function_not_running_nb);&#xD;&#xA;} else&#xD;&#xA;{&#xD;&#xA;&#x9;cf_trace_report(&quot;All functions in the request list are running&quot;);&#xD;&#xA;}&#xD;&#xA;" executionTime="0 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                <statements xsi:type="cofluent:Operation" xmi:id="_apnrEPlkEeuZqOfdZrWBTg" name="check_core_status" previous="_Y1DWIPlkEeuZqOfdZrWBTg" next="_eaLyoPlkEeuZqOfdZrWBTg" algorithm="if (LOG_LEVEL == 2){&#xD;&#xA;cf_trace_report(&quot;**** REACHED check_core_status *****&quot;);&#xD;&#xA;}&#xD;&#xA;core_available = false;&#xD;&#xA;&#xD;&#xA;for(int index=0; index&lt;number_of_cores; index++)&#xD;&#xA;{&#xD;&#xA;&#x9;if(core[index].state)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;core_available = true;&#xD;&#xA;&#x9;&#x9;cf_trace_report(&quot;core[%d] is available&quot;,index);&#xD;&#xA;&#x9;} else &#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;cf_trace_report(&quot;core[%d] executing function %d&quot;, index, core[index].function_executed_id);&#xD;&#xA;&#x9;}&#xD;&#xA;}" executionTime="0 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                <statements xsi:type="cofluent:LoopStatement" xmi:id="_eaLyoPlkEeuZqOfdZrWBTg" name="Loop2" firstStatement="_lq5AIPlkEeuZqOfdZrWBTg" lastStatement="_DrB3AAv9EeyQhoUON9k0yg" previous="_apnrEPlkEeuZqOfdZrWBTg" next="_OAx0wAv7EeyQhoUON9k0yg" condition="number_of_cores" type="MULTIPLICATION"/>
                <statements xsi:type="cofluent:Operation" xmi:id="_lq5AIPlkEeuZqOfdZrWBTg" name="find_function_to_execute" isFirstOf="_eaLyoPlkEeuZqOfdZrWBTg" next="_pC8hEPlkEeuZqOfdZrWBTg" algorithm="if (LOG_LEVEL == 2){&#xD;&#xA;cf_trace_report(&quot;************REACHED find_function_to_execute*******************&quot;);&#xD;&#xA;}&#xD;&#xA;// Re-initialize the local variables &#xD;&#xA;ack_cond = false;&#xD;&#xA;process_req_time = cf_dt::cf_time(0,CF_NS);&#xD;&#xA;request_list_highest_priority = -1;&#xD;&#xA;int highest_priority_req_id = -1;&#xD;&#xA;&#xD;&#xA;// checking if request_list.function_id matches core.function_executed_id&#xD;&#xA;for (int i=0; i&lt;request_number; i++)&#xD;&#xA;{&#xD;&#xA;&#x9;if (LOG_LEVEL == 1){&#xD;&#xA;&#x9;cf_trace_report(&quot;request_list[%d].function_id: %d , core[%d].function_executed_id: %d&quot;,i,request_list[i].function_id, Loop2_index, core[Loop2_index].function_executed_id);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (request_list[i].function_id == core[Loop2_index].function_executed_id) &#xD;&#xA;&#x9;{&#xA;&#x9;&#x9;core[Loop2_index].function_to_execute_req_id = i;&#xA;&#x9;}&#xD;&#xA;&#x9;//cf_trace_report(&quot;core[Loop2_index].function_to_execute_req_id: %d&quot;,core[Loop2_index].function_to_execute_req_id);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//if (core[Loop2_index].state = false)&#xD;&#xA;//{&#xD;&#xA;&#xD;&#xA;for (int i=0; i&lt;request_number; i++)&#xD;&#xA;{&#xD;&#xA;&#x9;if (LOG_LEVEL == 1){&#xD;&#xA;&#x9;cf_trace_report(&quot;request_list[%d].core_nb: %d, Loop2_index: %d&quot;,i,request_list[i].core_nb, Loop2_index);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;// check if the function is not mapped on a different core&#xD;&#xA;&#x9;// checking if the function is ready to be executed &#xD;&#xA;&#x9;if (request_list[i].core_nb == -1 || ((unsigned)request_list[i].core_nb) == Loop2_index)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;if (LOG_LEVEL == 1){&#xD;&#xA;&#x9;&#x9;cf_trace_report(&quot;Checking if condition entered&quot;);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;bool executable_function = false;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;// check condition # 1 - the function is not running if the state is either stopped or to_be_stopped or not_started&#xD;&#xA;&#x9;&#x9;if(request_list[i].function_state != started &#xD;&#xA;&#x9;&#x9;&amp;&amp; request_list[i].function_state != to_be_started&#xD;&#xA;&#x9;&#x9;&amp;&amp; request_list[i].function_state != resumed&#xD;&#xA;&#x9;&#x9;&amp;&amp; request_list[i].function_state != to_be_resumed)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;if (LOG_LEVEL == 1){&#xD;&#xA;&#x9;&#x9;&#x9;cf_trace_report(&quot;****Entering check condition # 1*******&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;executable_function = true;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;// check condition # 2 - request_list.function_id matches core.function_executed_id&#xD;&#xA;&#x9;&#x9;if (request_list[i].function_id == core[i].function_executed_id)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;if (LOG_LEVEL == 1){&#xD;&#xA;&#x9;&#x9;&#x9;cf_trace_report(&quot;****Entering check condition # 2*******&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;executable_function = true;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;//Check if the function is not already executed by another core&#xD;&#xA;&#x9;&#x9;// if function is ready to be executed, checking its 'priority' and setting value for variable 'highest_priority_req_id'&#xD;&#xA;&#x9;&#x9;if(executable_function)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;if ((SCHEDULER_POLICY == PRIORITY_PREAMPTIVE) || (SCHEDULER_POLICY == PRIORITY_NON_PREAMPTIVE &amp;&amp; core[Loop2_index].function_executed_id == FUNCTION_OVER))&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (LOG_LEVEL == 1){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;cf_trace_report(&quot;request_list[%d].priority: %d , request_list_highest_priority: %d&quot;, i,request_list[i].priority, request_list_highest_priority);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (request_list[i].priority > request_list_highest_priority)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (LOG_LEVEL == 1){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;cf_trace_report(&quot;Checking if - condition highest priority&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;highest_priority_req_id = i;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;core[Loop2_index].function_to_execute_req_id = request_list[i].req_id;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;request_list_highest_priority = request_list[i].priority;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//cf_trace_report(&quot;core[%d].function_to_execute_req_id: %d&quot;, Loop2_index, core[Loop2_index].function_to_execute_req_id);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;//}&#xD;&#xA;// changing the state of stopped/not_started function to 'to_be_started'/'to_be_resumed' &#xD;&#xA;//cf_trace_report(&quot;highest_priority_req_id: %d&quot;,highest_priority_req_id);&#xD;&#xA;if (highest_priority_req_id != -1)&#xD;&#xA;{&#xD;&#xA;&#x9;core[Loop2_index].function_to_execute_req_id = request_list[highest_priority_req_id].req_id;&#xD;&#xA;&#x9;if(request_list[highest_priority_req_id].function_state == not_started)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;request_list[highest_priority_req_id].function_state = to_be_started;&#xD;&#xA;&#x9;&#x9;if (LOG_LEVEL == 1){&#xD;&#xA;&#x9;&#x9;cf_trace_report(&quot;***to_be_started****&quot;);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} else &#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;request_list[highest_priority_req_id].function_state = to_be_resumed;&#xD;&#xA;&#x9;&#x9;if (LOG_LEVEL == 1){&#xD;&#xA;&#x9;&#x9;cf_trace_report(&quot;***to_be_resumed****&quot;);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;}&#xD;&#xA;//} // check the condition&#xD;&#xA;&#xD;&#xA;//cf_trace_report(&quot;core[%d].function_to_execute_req_id: %d&quot;,Loop2_index,core[Loop2_index].function_to_execute_req_id);&#xD;&#xA;cf_trace_report(&quot;core[%d].function_to_execute_req_id: %d&quot;,Loop2_index , core[Loop2_index].function_to_execute_req_id);&#xD;&#xA;&#xD;&#xA;if(core[Loop2_index].function_to_execute_req_id >= 0)&#xD;&#xA;{&#xD;&#xA;&#x9;cf_trace_report(&quot;Core[%d] wants to execute function_id = %d, req_id = %d&quot;, Loop2_index, request_list[core[Loop2_index].function_to_execute_req_id].function_id, core[Loop2_index].function_to_execute_req_id);&#xD;&#xA;&#x9;&#xD;&#xA;}else &#xD;&#xA;{&#xD;&#xA;&#x9;cf_trace_report(&quot;Core[%d] has no function to execute&quot;, Loop2_index);&#xD;&#xA;}" executionTime="0 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                <statements xsi:type="cofluent:Operation" xmi:id="_pC8hEPlkEeuZqOfdZrWBTg" name="stop_function" previous="_lq5AIPlkEeuZqOfdZrWBTg" next="_qwV3APlkEeuZqOfdZrWBTg" algorithm="if (LOG_LEVEL == 2){&#xD;&#xA;cf_trace_report(&quot;************REACHED stop_function*******************&quot;);&#xD;&#xA;}&#xD;&#xA;// if function executed by the core is different from the one that must be executed &#xD;&#xA;// and previous function executed by core is not over &#xD;&#xA;if (LOG_LEVEL == 1){&#xD;&#xA;cf_trace_report(&quot;request_list[core[Loop2_index].function_to_execute_req_id].function_id : %d&quot;,request_list[core[Loop2_index].function_to_execute_req_id].function_id);&#xD;&#xA;cf_trace_report(&quot;core[Loop2_index].function_executed_id : %d&quot;,core[Loop2_index].function_executed_id);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if((request_list[core[Loop2_index].function_to_execute_req_id].function_id != core[Loop2_index].function_executed_id) &amp;&amp; &#xD;&#xA;(core[Loop2_index].function_executed_id != -1) &amp;&amp; (SCHEDULER_POLICY != PRIORITY_NON_PREAMPTIVE))&#xD;&#xA;{&#xD;&#xA;&#x9;// stop the function executed by the core&#xD;&#xA;&#x9;cf_trace_report(&quot;*** ENTER THE STOP CONDITION ***&quot;); &#xD;&#xA;&#x9;&#xD;&#xA;&#x9;// find the req_id associated with the current function executed&#xD;&#xA;&#x9;for(int i=0; i&lt;request_number; i++)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;if(request_list[i].function_id == core[Loop2_index].function_executed_id)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;executed_function_to_stop_req_id = request_list[i].req_id;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;cf_trace_report(&quot;stop the function %d; path %s&quot;,request_list[executed_function_to_stop_req_id].function_id, request_list[executed_function_to_stop_req_id].function_path.c_str());&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;// stop the function executed &#xD;&#xA;&#x9;function_beh = cf_get_beh_handle(request_list[executed_function_to_stop_req_id].function_path.c_str());&#xD;&#xA;&#x9;function_beh->stop();&#xD;&#xA;&#x9;cfa_current_state = CF_FCT_ST_SUSPEND;&#xD;&#xA;&#x9;request_list[executed_function_to_stop_req_id].core_nb = -1;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;// update function state&#xD;&#xA;&#x9;request_list[executed_function_to_stop_req_id].function_state = stopped;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;// update core status &#xD;&#xA;&#x9;core_available = true;&#xD;&#xA;&#x9;core[Loop2_index].state = true; // core is available after the function is stopped&#xD;&#xA;&#x9;core[Loop2_index].function_executed_id = -1;&#xD;&#xA;&#x9;//core_path = &quot;/cores[&quot; + std::to_string(Loop2_index) + &quot;]&quot;;&#xD;&#xA;&#x9;core_path = &quot;/cores_&quot; + std::to_string(Loop2_index);&#xD;&#xA;&#x9;path = scheduler_path + core_path;&#xD;&#xA;&#x9;cf_trace_report(&quot;Error path = %s&quot;,path.c_str());&#xD;&#xA;&#x9;cf_get_beh_handle(path)->reset();&#x9; &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//Check if the function executed is the same as the one executed previously&#xD;&#xA;if(request_list[function_to_execute_req_id].function_id != previous_executed_function_id)&#xD;&#xA;{&#xD;&#xA;&#x9;process_req_time = context_switch_time_var;&#xD;&#xA;} else &#xD;&#xA;{&#xD;&#xA;&#x9;process_req_time = cf_dt::cf_time(0,CF_NS);&#xD;&#xA;}&#xD;&#xA;if(request_number > 0)&#xD;&#xA;{&#xD;&#xA;&#x9;previous_executed_function_id = request_list[function_to_execute_req_id].function_id;&#xD;&#xA;}" executionTime="0 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                <statements xsi:type="cofluent:Operation" xmi:id="_qwV3APlkEeuZqOfdZrWBTg" name="context_switch_time_op" previous="_pC8hEPlkEeuZqOfdZrWBTg" next="_tTxdEPlkEeuZqOfdZrWBTg" executionTime="0 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                <statements xsi:type="cofluent:Operation" xmi:id="_tTxdEPlkEeuZqOfdZrWBTg" name="start_function" previous="_qwV3APlkEeuZqOfdZrWBTg" next="_6wzgoB2xEe2p5_jMl7Ycdw" algorithm="if (LOG_LEVEL == 2){&#xD;&#xA;cf_trace_report(&quot;************REACHED start_function*******************&quot;);&#xD;&#xA;}&#xD;&#xA;//cf_trace_report(&quot;core[%d].function_to_execute_req_id: %d&quot;,Loop2_index,core[Loop2_index].function_to_execute_req_id);&#xD;&#xA;//cf_trace_report(&quot;request_list[core[%d].function_to_execute_req_id].function_id: %d&quot;,Loop2_index,request_list[core[Loop2_index].function_to_execute_req_id].function_id);&#xD;&#xA;//cf_trace_report(&quot;core[%d].function_executed_id: %d&quot;,Loop2_index,core[Loop2_index].function_executed_id);&#xD;&#xA;//cf_trace_report(&quot;core[%d].function_to_execute_req_id: %d&quot;,Loop2_index,core[Loop2_index].function_to_execute_req_id);&#xD;&#xA;start_core = false;&#xD;&#xA;&#xD;&#xA;if(request_list[core[Loop2_index].function_to_execute_req_id].function_id != core[Loop2_index].function_executed_id &amp;&amp; core[Loop2_index].function_to_execute_req_id != -1)&#xD;&#xA;{&#xD;&#xA;&#x9;//cf_trace_report(&quot;Enter the condition&quot;);&#xD;&#xA;&#x9;start_core = true;&#xD;&#xA;&#x9;if (request_list[core[Loop2_index].function_to_execute_req_id].function_state == to_be_started)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;ack_cond = true;&#xD;&#xA;&#x9;&#x9;request_list[core[Loop2_index].function_to_execute_req_id].function_state = started;&#xD;&#xA;&#x9;&#x9;request_list[core[Loop2_index].function_to_execute_req_id].core_nb = Loop2_index; // added line since task0 was being executed by core[0] as well as core[1]&#xD;&#xA;&#x9;&#x9;cf_trace_report(&quot;core[%d] start function %d&quot;,Loop2_index, request_list[core[Loop2_index].function_to_execute_req_id].function_id);&#xD;&#xA;&#x9;} else &#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;cf_trace_report(&quot;core[%d] resume function %d&quot;,Loop2_index, request_list[core[Loop2_index].function_to_execute_req_id].function_id);&#xD;&#xA;&#x9;&#x9;request_list[core[Loop2_index].function_to_execute_req_id].function_state = resumed;&#xD;&#xA;&#x9;&#x9;request_list[core[Loop2_index].function_to_execute_req_id].core_nb = Loop2_index;&#xD;&#xA;&#x9;&#x9;function_beh = cf_get_beh_handle(request_list[core[Loop2_index].function_to_execute_req_id].function_path.c_str());&#xD;&#xA;&#x9;&#x9;function_beh->resume();&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;request_list[core[Loop2_index].function_to_execute_req_id].last_time_executed = cf_time_stamp();&#xD;&#xA;&#x9;executed_function_start_time = cf_time_stamp();&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;//updating core status&#xD;&#xA;&#x9;core[Loop2_index].state = false; // core is not available anymore &#xD;&#xA;&#x9;core[Loop2_index].function_executed_id = request_list[core[Loop2_index].function_to_execute_req_id].function_id;&#xD;&#xA;&#x9;core[Loop2_index].function_executed_priority = request_list[core[Loop2_index].function_to_execute_req_id].priority;&#xD;&#xA;&#x9;core[Loop2_index].cpu_last_activation_time = cf_time_stamp();&#xD;&#xA;}&#xD;&#xA;if (LOG_LEVEL == 1){&#xD;&#xA;cf_trace_report(&quot;Loop2_index: %d&quot;,Loop2_index);&#xD;&#xA;}&#xD;&#xA;" executionTime="0 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                <statements xsi:type="cofluent:MultipleGuardedStatement" xmi:id="_9Td3UAqkEeyQhoUON9k0yg" name="MultipleWait" previous="_q5AWkAv2EeyQhoUON9k0yg" next="_Y1DWIPlkEeuZqOfdZrWBTg">
                  <guardedBranches xmi:id="_NN9lIAqlEeyQhoUON9k0yg" name="Branch" firstStatement="_VGXd4PlkEeuZqOfdZrWBTg" lastStatement="_WXDpsPlkEeuZqOfdZrWBTg"/>
                  <guardedBranches xmi:id="_dER9kAqlEeyQhoUON9k0yg" name="Branch2" firstStatement="_a-dgkAqlEeyQhoUON9k0yg" lastStatement="_Qj8CdAqlEeyQhoUON9k0yg"/>
                </statements>
                <statements xsi:type="cofluent:Operation" xmi:id="_Qj8CdAqlEeyQhoUON9k0yg" name="update_req_list2" isLastOf="_dER9kAqlEeyQhoUON9k0yg" previous="_a-dgkAqlEeyQhoUON9k0yg" algorithm="//Check if the message queue as at least two messages&#xD;&#xA;&#x9;if( p_mq_rel.get_message_queue().get_msg_count() > 0)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;//Peek the message index 1, index 0 is the first message&#xD;&#xA;&#x9;&#x9;transaction_ptr_update_req_list2 = p_mq_rel.get_message_queue().peek(0);&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;//Display the content of the transaction&#xD;&#xA;&#x9;&#x9;cf_trace_report(&quot;Msg 0 = %d&quot;, transaction_ptr_update_req_list2->get_data());&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;cf_trace_report(&quot;core_mutex release received from %d&quot;, rel);&#xD;&#xA;&#xD;&#xA;for(int i=0; i&lt;request_number; i++)&#xD;&#xA;{&#xD;&#xA;&#x9;if(request_list[i].function_id == rel)&#xD;&#xA;&#x9;&#x9;function_executed_req_id = request_list[i].req_id;&#xD;&#xA;&#x9;cf_trace_report(&quot;function_executed_req_id = %d&quot;,function_executed_req_id);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;//find core executing the function and update its status&#xD;&#xA;for (int i=0; i&lt;number_of_cores; i++)&#xD;&#xA;{&#xD;&#xA;&#x9;if(core[i].function_executed_id == rel)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;core[i].state = true; //core is available once again&#xD;&#xA;&#x9;&#x9;core[i].function_executed_id = FUNCTION_OVER;&#xD;&#xA;&#x9;&#x9;core[i].function_executed_priority = FUNCTION_OVER;&#xD;&#xA;&#x9;&#x9;core[i].function_to_execute_req_id = FUNCTION_OVER;&#xD;&#xA;&#x9;&#x9;core[i].cpu_total_active_time = cf_time_stamp()-core[i].cpu_last_activation_time;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;core_path = &quot;/cores[&quot; + std::to_string(i) + &quot;]&quot;;&#xD;&#xA;&#x9;&#x9;path = scheduler_path + core_path;&#xD;&#xA;&#x9;&#x9;if (LOG_LEVEL == 1){&#xD;&#xA;&#x9;&#x9;cf_trace_report(&quot;path: %s&quot;,path.c_str());&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;cf_get_beh_handle(path)->reset();&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;if (core_path == &quot;/cores[0]&quot;){&#xD;&#xA;&#x9;&#x9;&#x9;cf_get_beh_handle(&quot;/TestAppPlt/Platform/Processors/AtomQuad0/Producer&quot;)->reset();&#xD;&#xA;&#x9;&#x9;&#x9;cf_trace_report(&quot;AtomQuad0-Producer stopped&quot;);&#xD;&#xA;&#x9;&#x9;} else if (core_path == &quot;/cores[1]&quot;){&#xD;&#xA;&#x9;&#x9;&#x9;cf_get_beh_handle(&quot;/TestAppPlt/Platform/Processors/AtomQuad1/Producer&quot;)->reset();&#xD;&#xA;&#x9;&#x9;&#x9;cf_trace_report(&quot;AtomQuad1-Producer stopped&quot;);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#x9;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Avoiding a bug when a release is received when a function is stopped&#xD;&#xA;if(request_list[function_executed_req_id].function_state == stopped)&#xD;&#xA;{&#xD;&#xA;&#x9;function_beh = cf_get_beh_handle(request_list[function_executed_req_id].function_path.c_str());&#xD;&#xA;&#x9;function_beh->resume();&#xD;&#xA;&#x9;cf_trace_report(&quot;request_list[function_executed_req_id].function_path: %s&quot;,request_list[function_executed_req_id].function_path.c_str());&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Delete request from the req list (shift requests in the list)&#xD;&#xA;for(int i=function_executed_req_id; i&lt;request_number; i++)&#xD;&#xA;{&#xD;&#xA;&#x9;request_list[i].req_id             = i;&#xD;&#xA;&#x9;request_list[i].function_id        = request_list[i+1].function_id;&#xD;&#xA;&#x9;request_list[i].priority           = request_list[i+1].priority;&#xD;&#xA;&#x9;request_list[i].core_nb            = request_list[i+1].core_nb;&#xD;&#xA;&#x9;request_list[i].function_path      = request_list[i+1].function_path;&#xD;&#xA;&#x9;request_list[i].function_state     = request_list[i+1].function_state;&#xD;&#xA;&#x9;request_list[i].last_time_executed = request_list[i+1].last_time_executed;&#xD;&#xA;}&#xD;&#xA;request_number--;&#xD;&#xA;" executionTime="0 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                <statements xsi:type="cofluent:InputAction" xmi:id="_a-dgkAqlEeyQhoUON9k0yg" name="InAction2" isFirstOf="_dER9kAqlEeyQhoUON9k0yg" next="_Qj8CdAqlEeyQhoUON9k0yg" port="_wAUEMPlWEeuZqOfdZrWBTg" timeout=" ns" priority="" duration=" ns" vectorSize="" blocking="true" condition=""/>
                <statements xsi:type="cofluent:Operation" xmi:id="_q5AWkAv2EeyQhoUON9k0yg" name="check_operation" isFirstOf="_UII7EPlkEeuZqOfdZrWBTg" next="_9Td3UAqkEeyQhoUON9k0yg" algorithm="if (LOG_LEVEL == 2){&#xD;&#xA;cf_trace_report(&quot;***** REACHED check_operation *******&quot;);&#xD;&#xA;}" executionTime="0 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                <statements xsi:type="cofluent:Operation" xmi:id="_OAx0wAv7EeyQhoUON9k0yg" name="loop_check" isLastOf="_UII7EPlkEeuZqOfdZrWBTg" previous="_eaLyoPlkEeuZqOfdZrWBTg" algorithm="//cf_trace_report(&quot;**** REACHED loop_check ******&quot;);" executionTime="0 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                <statements xsi:type="cofluent:Operation" xmi:id="_DrB3AAv9EeyQhoUON9k0yg" name="inner_loop_check" isLastOf="_eaLyoPlkEeuZqOfdZrWBTg" previous="_8vqwwBqJEeykeN24kl0UTA" algorithm="//cf_trace_report(&quot;**** REACHED inner_loop_check ****&quot;);" executionTime="0 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                <statements xsi:type="cofluent:OutputAction" xmi:id="_8vqwwBqJEeykeN24kl0UTA" name="OutAction2" documentation="" previous="_qhEksCFgEeyOKdR4z820wQ" next="_DrB3AAv9EeyQhoUON9k0yg" outputSelector="_DEYaoBqLEeykeN24kl0UTA" duration=" ns" condition="ack_cond" priority="" vectorSize="" blocking="true" call=""/>
                <statements xsi:type="cofluent:OutputAction" xmi:id="_qhEksCFgEeyOKdR4z820wQ" name="OutAction" previous="_6wzgoB2xEe2p5_jMl7Ycdw" next="_8vqwwBqJEeykeN24kl0UTA" outputSelector="_awvk0B2uEe2p5_jMl7Ycdw" duration=" ns" condition="start_core" priority="" vectorSize="" blocking="true" call=""/>
                <statements xsi:type="cofluent:Operation" xmi:id="_6wzgoB2xEe2p5_jMl7Ycdw" name="INDEX_CHECK" previous="_tTxdEPlkEeuZqOfdZrWBTg" next="_qhEksCFgEeyOKdR4z820wQ" algorithm="cf_trace_report(&quot;***** Loop2_index: %d *******&quot;, Loop2_index);" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
              </refinement>
            </models>
            <models xsi:type="cofluent:Function" xmi:id="_dUbpAPq4EeuZqOfdZrWBTg" name="cores" includes="#include &quot;cfm_atomquad0_interface.h&quot;&#xD;&#xA;#include &quot;cfm_mess_route.h&quot;" target="" declarations="cfm_atomquad0_interface* atomquad0_ptr;&#xD;&#xA;int mem_index;&#xD;&#xA;&#xD;&#xA;cfm_mess_route* core_ptr;" initializations="mem_index = 0;&#xD;&#xA;" includeInheritedHeader="" inheritanceClass="" callToInheritedConstructors="" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
              <max xmi:id="_VNKngR2uEe2p5_jMl7Ycdw" integerLimit="1"/>
              <min xmi:id="_VNKngB2uEe2p5_jMl7Ycdw" integerLimit="0"/>
              <ports xmi:id="_tdTaYCFiEeyOKdR4z820wQ" name="start_core0" type="MESSAGE_QUEUE" direction="IN" inputSelectorInputs="_pFQMQB2uEe2p5_jMl7Ycdw" relations="_rmA4QPq4EeuZqOfdZrWBTg" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                <constructorArguments></constructorArguments>
                <templateArguments></templateArguments>
              </ports>
              <refinement xsi:type="cofluent:Behavior" xmi:id="_fZf4EPq4EeuZqOfdZrWBTg" name="coresBh" firstStatement="_fZf4Efq4EeuZqOfdZrWBTg">
                <selectors xsi:type="cofluent:MultiInstancesInputSelector" xmi:id="_nplfgB2uEe2p5_jMl7Ycdw" name="InstanceInSelector" inputAction="_sGrlsCFiEeyOKdR4z820wQ" instanceNumber="SELF">
                  <inputs xmi:id="_pFQMQB2uEe2p5_jMl7Ycdw" name="InputSelectorInput" port="_tdTaYCFiEeyOKdR4z820wQ" priority="" timeout=" ns" duration=" ns" condition="" vectorSize=""/>
                </selectors>
                <statements xsi:type="cofluent:Operation" xmi:id="_fZf4Efq4EeuZqOfdZrWBTg" name="init" isFirstOf="_fZf4EPq4EeuZqOfdZrWBTg" next="_sGrlsCFiEeyOKdR4z820wQ" algorithm="atomquad0_ptr = dynamic_cast&lt;cfm_atomquad0_interface*>(cf_get_component(&quot;/TestAppPlt/Platform/Processors/AtomQuad0/AtomQuad0_Interface&quot;));&#xD;&#xA;//pointer = dynamic_cast&lt;cfm_interface*>(cf_get_component(&quot;/ConceptTest_part2App/interface&quot;));&#xD;&#xA;core_ptr = dynamic_cast&lt;cfm_mess_route*>(cf_get_component(&quot;/TestAppPlt/mess_route&quot;));" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                <statements xsi:type="cofluent:Operation" xmi:id="_i8I4YPq4EeuZqOfdZrWBTg" name="Operation" previous="_sGrlsCFiEeyOKdR4z820wQ" algorithm="cf_trace_report(&quot;***** REACHED cores %d *****&quot;,get_cp_index());&#xD;&#xA;//cf_trace_report(&quot;%s&quot;, get_cp_name().c_str());&#xD;&#xA;&#xD;&#xA;//cf_get_beh_handle(&quot;/TestAppPlt/Platform/Processors/AtomQuad0/Interface&quot;)->start();&#xD;&#xA;&#xD;&#xA;if (get_cp_index() == 0) {&#xD;&#xA;&#x9;mem_index = 100;&#xD;&#xA;} if (get_cp_index() == 1) {&#xD;&#xA;&#x9;mem_index = 200;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//mem_index = 100;&#xD;&#xA;&#x9;//atomquad0_ptr->notify(mem_index);&#xD;&#xA;&#x9;core_ptr->core_route(mem_index);&#xD;&#xA;&#x9;if (LOG_LEVEL == 2){&#xD;&#xA;&#x9;cf_trace_report(&quot;EXIT cores_0 ALGORITHM&quot;);&#xD;&#xA;&#x9;}&#xD;&#xA;" executionTime="1 d" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                <statements xsi:type="cofluent:InputAction" xmi:id="_sGrlsCFiEeyOKdR4z820wQ" name="InAction" previous="_fZf4Efq4EeuZqOfdZrWBTg" next="_i8I4YPq4EeuZqOfdZrWBTg" inputSelector="_nplfgB2uEe2p5_jMl7Ycdw" timeout=" ns" priority="" duration=" ns" vectorSize="" blocking="true" condition=""/>
              </refinement>
            </models>
            <relations xsi:type="cofluent:MessageQueue" xmi:id="_gYxWUPlQEeuZqOfdZrWBTg" name="req" ports="_tA5swPlWEeuZqOfdZrWBTg _taLIYPlWEeuZqOfdZrWBTg" policy="INFINITE" capacity="1" concurrency="1" concurrencyManagement="FULL" sendTime="0 ns" receiveTime="0 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD">
              <relationType xsi:type="cofluent:RelationDataType" xmi:id="_mtAUgPlQEeuZqOfdZrWBTg" dataType="_oWYtIPlQEeuZqOfdZrWBTg"/>
            </relations>
            <relations xsi:type="cofluent:MessageQueue" xmi:id="_gqpwgPlQEeuZqOfdZrWBTg" name="ack" ports="_xqdR0PlWEeuZqOfdZrWBTg _x4tJMPlWEeuZqOfdZrWBTg" capacity="1" concurrency="1" concurrencyManagement="FULL" sendTime="0 ns" receiveTime="0 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD">
              <max xmi:id="_hRs2YQv8EeyQhoUON9k0yg" designParameter="_MEZnwPlcEeuZqOfdZrWBTg"/>
              <min xmi:id="_hRs2YAv8EeyQhoUON9k0yg" integerLimit="0"/>
              <relationType xsi:type="cofluent:RelationPredefinedType" xmi:id="_gqpwgflQEeuZqOfdZrWBTg"/>
            </relations>
            <relations xsi:type="cofluent:MessageQueue" xmi:id="_g52DEPlQEeuZqOfdZrWBTg" name="rel" ports="_v1O1kPlWEeuZqOfdZrWBTg _wAUEMPlWEeuZqOfdZrWBTg" capacity="1" concurrency="1" concurrencyManagement="FULL" sendTime="0 ns" receiveTime="0 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD">
              <relationType xsi:type="cofluent:RelationPredefinedType" xmi:id="_g52DEflQEeuZqOfdZrWBTg"/>
            </relations>
            <relations xsi:type="cofluent:SharedVariable" xmi:id="_vY_NMPlQEeuZqOfdZrWBTg" name="sem_scheduler_access" ports="_14lG0PlQEeuZqOfdZrWBTg" semaphore="true" concurrency="1" counter="1" writeTime="0 ns" readTime="0 ns">
              <relationType xsi:type="cofluent:RelationPredefinedType" xmi:id="_vY_NMflQEeuZqOfdZrWBTg"/>
            </relations>
            <relations xsi:type="cofluent:MessageQueue" xmi:id="_rmA4QPq4EeuZqOfdZrWBTg" name="start_core0" ports="_udmJYPq4EeuZqOfdZrWBTg _tdTaYCFiEeyOKdR4z820wQ" capacity="1" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD">
              <max xmi:id="_6hgdMR2tEe2p5_jMl7Ycdw" integerLimit="1"/>
              <min xmi:id="_6hgdMB2tEe2p5_jMl7Ycdw" integerLimit="0"/>
              <relationType xsi:type="cofluent:RelationPredefinedType" xmi:id="_rmA4Qfq4EeuZqOfdZrWBTg"/>
            </relations>
          </refinement>
        </models>
        <relations xsi:type="cofluent:MessageQueue" xmi:id="_WXhxUPlEEeuZqOfdZrWBTg" name="MsgQ1" ports="_cfRysPlEEeuZqOfdZrWBTg _czZokPlEEeuZqOfdZrWBTg" capacity="1" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD">
          <relationType xsi:type="cofluent:RelationDataType" xmi:id="_dI5hAPlQEeuZqOfdZrWBTg" dataType="_SRBYgPlQEeuZqOfdZrWBTg"/>
        </relations>
      </refinement>
    </models>
    <models xsi:type="cofluent:Function" xmi:id="_PPtaEPlEEeuZqOfdZrWBTg" name="Producer" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
      <ports xmi:id="_aaNjoPlEEeuZqOfdZrWBTg" name="MsgQ" type="MESSAGE_QUEUE" direction="OUT" outputActions="_PPtaFflEEeuZqOfdZrWBTg" relations="_Uu60wPlEEeuZqOfdZrWBTg" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
        <constructorArguments></constructorArguments>
        <templateArguments></templateArguments>
      </ports>
      <refinement xsi:type="cofluent:Behavior" xmi:id="_PPtaEflEEeuZqOfdZrWBTg" name="ProducerBh" firstStatement="_PPtaEvlEEeuZqOfdZrWBTg">
        <statements xsi:type="cofluent:Operation" xmi:id="_PPtaEvlEEeuZqOfdZrWBTg" name="init" isFirstOf="_PPtaEflEEeuZqOfdZrWBTg" next="_PPtaE_lEEeuZqOfdZrWBTg" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
        <statements xsi:type="cofluent:LoopStatement" xmi:id="_PPtaE_lEEeuZqOfdZrWBTg" name="Loop" firstStatement="_PPtaFPlEEeuZqOfdZrWBTg" lastStatement="_PPtaFflEEeuZqOfdZrWBTg" previous="_PPtaEvlEEeuZqOfdZrWBTg" condition=""/>
        <statements xsi:type="cofluent:Operation" xmi:id="_PPtaFPlEEeuZqOfdZrWBTg" name="produce" isFirstOf="_PPtaE_lEEeuZqOfdZrWBTg" next="_PPtaFflEEeuZqOfdZrWBTg" algorithm="if (LOG_LEVEL == 1){&#xD;&#xA;cf_trace_report(&quot;Produce Entry&quot;);&#xD;&#xA;}" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
        <statements xsi:type="cofluent:OutputAction" xmi:id="_PPtaFflEEeuZqOfdZrWBTg" name="OutAction" isLastOf="_PPtaE_lEEeuZqOfdZrWBTg" previous="_PPtaFPlEEeuZqOfdZrWBTg" port="_aaNjoPlEEeuZqOfdZrWBTg" duration=" ns" condition="" priority="" vectorSize="" blocking="true" call=""/>
      </refinement>
    </models>
    <models xsi:type="cofluent:Function" xmi:id="_TdRmsPlEEeuZqOfdZrWBTg" name="Consumer" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
      <ports xmi:id="_iXPEkPlEEeuZqOfdZrWBTg" name="MsgQ2" type="MESSAGE_QUEUE" direction="IN" inputActions="_TdawpPlEEeuZqOfdZrWBTg" relations="_ZEPPMPlEEeuZqOfdZrWBTg" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
        <constructorArguments></constructorArguments>
        <templateArguments></templateArguments>
      </ports>
      <refinement xsi:type="cofluent:Behavior" xmi:id="_TdawoPlEEeuZqOfdZrWBTg" name="ConsumerBh" firstStatement="_TdawoflEEeuZqOfdZrWBTg">
        <statements xsi:type="cofluent:Operation" xmi:id="_TdawoflEEeuZqOfdZrWBTg" name="init" isFirstOf="_TdawoPlEEeuZqOfdZrWBTg" next="_TdawovlEEeuZqOfdZrWBTg" executionTime="100 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
        <statements xsi:type="cofluent:LoopStatement" xmi:id="_TdawovlEEeuZqOfdZrWBTg" name="Loop" firstStatement="_TdawpPlEEeuZqOfdZrWBTg" lastStatement="_Tdawo_lEEeuZqOfdZrWBTg" previous="_TdawoflEEeuZqOfdZrWBTg" condition=""/>
        <statements xsi:type="cofluent:Operation" xmi:id="_Tdawo_lEEeuZqOfdZrWBTg" name="consume" isLastOf="_TdawovlEEeuZqOfdZrWBTg" previous="_TdawpPlEEeuZqOfdZrWBTg" algorithm="if (LOG_LEVEL == 1){&#xD;&#xA;cf_trace_report(&quot;Consume Entry&quot;);&#xD;&#xA;}&#xD;&#xA;//MsgQ2.delete_data();" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
        <statements xsi:type="cofluent:InputAction" xmi:id="_TdawpPlEEeuZqOfdZrWBTg" name="InAction" isFirstOf="_TdawovlEEeuZqOfdZrWBTg" next="_Tdawo_lEEeuZqOfdZrWBTg" port="_iXPEkPlEEeuZqOfdZrWBTg" timeout=" ns" priority="" duration=" ns" vectorSize="" blocking="true" condition=""/>
      </refinement>
    </models>
    <models xsi:type="cofluent:Function" xmi:id="_doOqUCwyEeyjjNodrQ5ZTQ" name="Platform" target="" includeInheritedHeader="" inheritanceClass="" callToInheritedConstructors="" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
      <ports xmi:id="_Fny7oC9dEeyUlZFKI80e2g" name="Routing_AtomQuad0" type="MESSAGE_QUEUE" direction="IN" relations="_ADa_uTgGEeyiyOB-O-9_Fg" ports="_e6ZBQC9dEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
        <constructorArguments></constructorArguments>
        <templateArguments></templateArguments>
      </ports>
      <ports xmi:id="_uhqqsDBmEeyUlZFKI80e2g" name="Routing_AtomQuad1" type="MESSAGE_QUEUE" direction="IN" relations="_Fhl4mTgGEeyiyOB-O-9_Fg" ports="_8grjQDBmEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
        <constructorArguments></constructorArguments>
        <templateArguments></templateArguments>
      </ports>
      <ports xmi:id="_ZmQ7AA0hEe2Av5vOkNLtDA" name="Routing_BigCore0" type="MESSAGE_QUEUE" direction="IN" relations="_VAOkCQ0hEe2Av5vOkNLtDA" ports="_p0rqYA0hEe2Av5vOkNLtDA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
        <constructorArguments></constructorArguments>
        <templateArguments></templateArguments>
      </ports>
      <ports xmi:id="_XLujgA0nEe2Av5vOkNLtDA" name="Routing_BigCore1" type="MESSAGE_QUEUE" direction="IN" relations="_UjfV-Q0nEe2Av5vOkNLtDA" ports="_rB41oA0nEe2Av5vOkNLtDA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
        <constructorArguments></constructorArguments>
        <templateArguments></templateArguments>
      </ports>
      <refinement xsi:type="cofluent:Structure" xmi:id="_qF4d0CwyEeyjjNodrQ5ZTQ" name="PlatformSt">
        <models xsi:type="cofluent:Function" xmi:id="_qF4d0SwyEeyjjNodrQ5ZTQ" name="Processors" target="" includeInheritedHeader="" inheritanceClass="" callToInheritedConstructors="" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
          <ports xmi:id="_e6ZBQC9dEeyUlZFKI80e2g" name="Routing_AtomQuad0" type="MESSAGE_QUEUE" direction="IN" port="_Fny7oC9dEeyUlZFKI80e2g" ports="_e6aPYC9dEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <ports xmi:id="_J3sswC9sEeyUlZFKI80e2g" name="AtomQuad0_to_BUS" type="MESSAGE_QUEUE" direction="OUT" relations="_AGiUsC9sEeyUlZFKI80e2g" ports="_J3tT0C9sEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <ports xmi:id="_8grjQDBmEeyUlZFKI80e2g" name="Routing_AtomQuad1" type="MESSAGE_QUEUE" direction="IN" port="_uhqqsDBmEeyUlZFKI80e2g" ports="_8gsKUDBmEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <ports xmi:id="_NdtsIDBnEeyUlZFKI80e2g" name="AtomQuad1_to_BUS" type="MESSAGE_QUEUE" direction="OUT" relations="_LUDQ8DBnEeyUlZFKI80e2g" ports="_NdtsITBnEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <ports xmi:id="_XKhicO2SEeyk8YlLdndsRA" name="BUS_to_AtomQuad0" type="MESSAGE_QUEUE" direction="IN" relations="_JOsgye2SEeyk8YlLdndsRA" ports="_XKhice2SEeyk8YlLdndsRA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <ports xmi:id="_5efh8O2SEeyVp--j9k5gbQ" name="BUS_to_AtomQuad1" type="MESSAGE_QUEUE" direction="IN" relations="_1zqO-e2SEeyVp--j9k5gbQ" ports="_5efh8e2SEeyVp--j9k5gbQ" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <ports xmi:id="_p0rqYA0hEe2Av5vOkNLtDA" name="Routing_BigCore0" type="MESSAGE_QUEUE" direction="IN" port="_ZmQ7AA0hEe2Av5vOkNLtDA" ports="_iDb8nw0hEe2Av5vOkNLtDA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <ports xmi:id="_INat8A0jEe2Av5vOkNLtDA" name="BigCore0_to_BUS" type="MESSAGE_QUEUE" direction="OUT" relations="_C8gOBA0jEe2Av5vOkNLtDA" ports="_INat8Q0jEe2Av5vOkNLtDA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <ports xmi:id="_KAnJ4A0jEe2Av5vOkNLtDA" name="BUS_to_BigCore0" type="MESSAGE_QUEUE" direction="IN" relations="_C8gN-Q0jEe2Av5vOkNLtDA" ports="_KAnJ4Q0jEe2Av5vOkNLtDA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <ports xmi:id="_rB41oA0nEe2Av5vOkNLtDA" name="Routing_BigCore1" type="MESSAGE_QUEUE" direction="IN" port="_XLujgA0nEe2Av5vOkNLtDA" ports="_lIcWGA0nEe2Av5vOkNLtDA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <refinement xsi:type="cofluent:Structure" xmi:id="_sqDDsCwyEeyjjNodrQ5ZTQ" name="ProcessorsSt">
            <models xsi:type="cofluent:Function" xmi:id="_sqDDsSwyEeyjjNodrQ5ZTQ" name="AtomQuad0" target="" includeInheritedHeader="" inheritanceClass="" callToInheritedConstructors="" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
              <ports xmi:id="_e6aPYC9dEeyUlZFKI80e2g" name="Routing_AtomQuad0" type="MESSAGE_QUEUE" direction="IN" port="_e6ZBQC9dEeyUlZFKI80e2g" ports="_pHa18C9dEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                <constructorArguments></constructorArguments>
                <templateArguments></templateArguments>
              </ports>
              <ports xmi:id="_J3tT0C9sEeyUlZFKI80e2g" name="AtomQuad0_to_BUS" type="MESSAGE_QUEUE" direction="OUT" port="_J3sswC9sEeyUlZFKI80e2g" ports="_NzTmsC9sEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                <constructorArguments></constructorArguments>
                <templateArguments></templateArguments>
              </ports>
              <ports xmi:id="_XKhice2SEeyk8YlLdndsRA" name="BUS_to_AtomQuad0" type="MESSAGE_QUEUE" direction="IN" port="_XKhicO2SEeyk8YlLdndsRA" ports="_dwE6IO2SEeyk8YlLdndsRA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                <constructorArguments></constructorArguments>
                <templateArguments></templateArguments>
              </ports>
              <refinement xsi:type="cofluent:Structure" xmi:id="_ihdNgC27EeyjjNodrQ5ZTQ" name="AtomQuad0St">
                <models xsi:type="cofluent:Function" xmi:id="_ihd0kC27EeyjjNodrQ5ZTQ" name="Producer" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
                  <ports xmi:id="_pHa18C9dEeyUlZFKI80e2g" name="Routing_AtomQuad0" type="MESSAGE_QUEUE" direction="IN" inputActions="_mbTN8C9dEeyUlZFKI80e2g" port="_e6aPYC9dEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                    <constructorArguments></constructorArguments>
                    <templateArguments></templateArguments>
                  </ports>
                  <ports xmi:id="_NzTmsC9sEeyUlZFKI80e2g" name="AtomQuad0_to_BUS" type="MESSAGE_QUEUE" direction="OUT" outputActions="_RUrRIC9rEeyUlZFKI80e2g" port="_J3tT0C9sEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                    <constructorArguments></constructorArguments>
                    <templateArguments></templateArguments>
                  </ports>
                  <ports xmi:id="_dwE6IO2SEeyk8YlLdndsRA" name="BUS_to_AtomQuad0" type="MESSAGE_QUEUE" direction="IN" inputActions="_77tAsO2REeyk8YlLdndsRA" port="_XKhice2SEeyk8YlLdndsRA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                    <constructorArguments></constructorArguments>
                    <templateArguments></templateArguments>
                  </ports>
                  <refinement xsi:type="cofluent:Behavior" xmi:id="_ihgQ0C27EeyjjNodrQ5ZTQ" name="ProducerBh" firstStatement="_ihgQ0S27EeyjjNodrQ5ZTQ">
                    <statements xsi:type="cofluent:Operation" xmi:id="_ihgQ0S27EeyjjNodrQ5ZTQ" name="init" isFirstOf="_ihgQ0C27EeyjjNodrQ5ZTQ" next="_Y5kl8C9rEeyUlZFKI80e2g" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                    <statements xsi:type="cofluent:InputAction" xmi:id="_mbTN8C9dEeyUlZFKI80e2g" name="InAction2" documentation="" isFirstOf="_Y5kl8C9rEeyUlZFKI80e2g" next="_Oi4e8C9rEeyUlZFKI80e2g" port="_pHa18C9dEeyUlZFKI80e2g" timeout=" ns" priority="" duration=" ns" vectorSize="" blocking="true" condition=""/>
                    <statements xsi:type="cofluent:Operation" xmi:id="_Oi4e8C9rEeyUlZFKI80e2g" name="process" previous="_mbTN8C9dEeyUlZFKI80e2g" next="_RUrRIC9rEeyUlZFKI80e2g" algorithm="cf_trace_report (&quot;****Reached AtomQuad0 *****&quot;);&#xD;&#xA;AtomQuad0_to_BUS_trans = Routing_AtomQuad0_trans;&#xD;&#xA;AtomQuad0_to_BUS.plf_source = ATOMQUAD0_ID;&#xD;&#xA;//AtomQuad0_to_BUS.packet_type = WRITE_REQ;&#xD;&#xA;//AtomQuad0_to_BUS.time_stamp = cf_time_stamp();&#xD;&#xA;//AtomQuad0_to_BUS_trans.set_time_stamp_now();&#xD;&#xA;//AtomQuad0_to_BUS_trans.set_user_data_length(cf_dt::cf_data_size(64,CF_BYTE));" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                    <statements xsi:type="cofluent:OutputAction" xmi:id="_RUrRIC9rEeyUlZFKI80e2g" name="OutAction2" previous="_Oi4e8C9rEeyUlZFKI80e2g" next="_77tAsO2REeyk8YlLdndsRA" port="_NzTmsC9sEeyUlZFKI80e2g" duration=" ns" condition="" priority="" vectorSize="" blocking="true" call=""/>
                    <statements xsi:type="cofluent:LoopStatement" xmi:id="_Y5kl8C9rEeyUlZFKI80e2g" name="Loop" firstStatement="_mbTN8C9dEeyUlZFKI80e2g" lastStatement="_77tAsO2REeyk8YlLdndsRA" previous="_ihgQ0S27EeyjjNodrQ5ZTQ"/>
                    <statements xsi:type="cofluent:InputAction" xmi:id="_77tAsO2REeyk8YlLdndsRA" name="InAction3" documentation="" isLastOf="_Y5kl8C9rEeyUlZFKI80e2g" previous="_RUrRIC9rEeyUlZFKI80e2g" port="_dwE6IO2SEeyk8YlLdndsRA" timeout=" ns" priority="" duration=" ns" vectorSize="" condition=""/>
                  </refinement>
                </models>
                <models xsi:type="cofluent:Function" xmi:id="_XdjJQC29EeyjjNodrQ5ZTQ" name="AtomQuad0_Interface" target="" declarations="public:&#xD;&#xA;&#x9;void notify( int addr );" definitions="void cfm_atomquad0_interface::notify( int addr)&#xD;&#xA;{  &#xD;&#xA;&#x9;if (LOG_LEVEL == 1){&#xD;&#xA;&#x9;cf_trace_report(&quot;addr: %d&quot;,addr);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;//MsgQ.addr = addr;&#xD;&#xA;&#x9;p_mq_MsgQ.send( &amp;MsgQ_trans);&#xD;&#xA;&#x9;if (LOG_LEVEL == 1){&#xD;&#xA;&#x9;cf_trace_report(&quot;EXIT&quot;);&#xD;&#xA;&#x9;}&#xD;&#xA;}" includeInheritedHeader="" inheritanceClass="" callToInheritedConstructors="" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
                  <ports xmi:id="_HNDHgC3DEeyjjNodrQ5ZTQ" name="MsgQ" type="MESSAGE_QUEUE" direction="OUT" relations="_fR0W0C29EeyjjNodrQ5ZTQ" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                    <constructorArguments></constructorArguments>
                    <templateArguments></templateArguments>
                  </ports>
                  <refinement xsi:type="cofluent:Behavior" xmi:id="_Bir_AC2-EeyjjNodrQ5ZTQ" name="AtomQuad0_InterfaceBh" firstStatement="_BismEC2-EeyjjNodrQ5ZTQ">
                    <statements xsi:type="cofluent:Operation" xmi:id="_BismEC2-EeyjjNodrQ5ZTQ" name="Operation" isFirstOf="_Bir_AC2-EeyjjNodrQ5ZTQ" executionTime=" ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                  </refinement>
                </models>
                <relations xsi:type="cofluent:MessageQueue" xmi:id="_fR0W0C29EeyjjNodrQ5ZTQ" name="MsgQ" ports="_HNDHgC3DEeyjjNodrQ5ZTQ" policy="INFINITE" capacity="10000" concurrency="1" concurrencyManagement="FULL" sendTime="0 ns" receiveTime="0 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD">
                  <relationType xsi:type="cofluent:RelationPredefinedType" xmi:id="_ohIFYC3FEeyjjNodrQ5ZTQ"/>
                </relations>
              </refinement>
            </models>
            <models xsi:type="cofluent:Function" xmi:id="_oJcZ5zBlEeyUlZFKI80e2g" name="AtomQuad1" target="" includeInheritedHeader="" inheritanceClass="" callToInheritedConstructors="" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
              <ports xmi:id="_8gsKUDBmEeyUlZFKI80e2g" name="Routing_AtomQuad1" type="MESSAGE_QUEUE" direction="IN" port="_8grjQDBmEeyUlZFKI80e2g" ports="_oJdA4zBlEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                <constructorArguments></constructorArguments>
                <templateArguments></templateArguments>
              </ports>
              <ports xmi:id="_NdtsITBnEeyUlZFKI80e2g" name="AtomQuad1_to_BUS" type="MESSAGE_QUEUE" direction="OUT" port="_NdtsIDBnEeyUlZFKI80e2g" ports="_oJdA5TBlEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                <constructorArguments></constructorArguments>
                <templateArguments></templateArguments>
              </ports>
              <ports xmi:id="_5efh8e2SEeyVp--j9k5gbQ" name="BUS_to_AtomQuad1" type="MESSAGE_QUEUE" direction="IN" port="_5efh8O2SEeyVp--j9k5gbQ" ports="_IdYjIO2TEeyVp--j9k5gbQ" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                <constructorArguments></constructorArguments>
                <templateArguments></templateArguments>
              </ports>
              <refinement xsi:type="cofluent:Structure" xmi:id="_oJdA4DBlEeyUlZFKI80e2g" name="AtomQuad1St">
                <models xsi:type="cofluent:Function" xmi:id="_oJdA4TBlEeyUlZFKI80e2g" name="Producer" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
                  <ports xmi:id="_oJdA4zBlEeyUlZFKI80e2g" name="Routing_AtomQuad1" type="MESSAGE_QUEUE" direction="IN" inputActions="_oJdA6zBlEeyUlZFKI80e2g" port="_8gsKUDBmEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                    <constructorArguments></constructorArguments>
                    <templateArguments></templateArguments>
                  </ports>
                  <ports xmi:id="_oJdA5TBlEeyUlZFKI80e2g" name="AtomQuad1_to_BUS" type="MESSAGE_QUEUE" direction="OUT" outputActions="_oJdA7zBlEeyUlZFKI80e2g" port="_NdtsITBnEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                    <constructorArguments></constructorArguments>
                    <templateArguments></templateArguments>
                  </ports>
                  <ports xmi:id="_IdYjIO2TEeyVp--j9k5gbQ" name="BUS_to_AtomQuad1" type="MESSAGE_QUEUE" direction="IN" inputActions="__rwVcO2SEeyVp--j9k5gbQ" port="_5efh8e2SEeyVp--j9k5gbQ" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                    <constructorArguments></constructorArguments>
                    <templateArguments></templateArguments>
                  </ports>
                  <refinement xsi:type="cofluent:Behavior" xmi:id="_oJdA5zBlEeyUlZFKI80e2g" name="ProducerBh" firstStatement="_oJdA6DBlEeyUlZFKI80e2g">
                    <statements xsi:type="cofluent:Operation" xmi:id="_oJdA6DBlEeyUlZFKI80e2g" name="init" isFirstOf="_oJdA5zBlEeyUlZFKI80e2g" next="_oJdA8DBlEeyUlZFKI80e2g" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                    <statements xsi:type="cofluent:InputAction" xmi:id="_oJdA6zBlEeyUlZFKI80e2g" name="InAction2" documentation="" isFirstOf="_oJdA8DBlEeyUlZFKI80e2g" next="_oJdA7jBlEeyUlZFKI80e2g" port="_oJdA4zBlEeyUlZFKI80e2g" timeout=" ns" priority="" duration=" ns" vectorSize="" blocking="true" condition=""/>
                    <statements xsi:type="cofluent:Operation" xmi:id="_oJdA7jBlEeyUlZFKI80e2g" name="process" previous="_oJdA6zBlEeyUlZFKI80e2g" next="_oJdA7zBlEeyUlZFKI80e2g" algorithm="cf_trace_report (&quot;****Reached AtomQuad1 *****&quot;);&#xD;&#xA;AtomQuad1_to_BUS_trans = Routing_AtomQuad1_trans;&#xD;&#xA;AtomQuad1_to_BUS.plf_source = ATOMQUAD1_ID;&#xD;&#xA;//AtomQuad1_to_BUS.packet_type = WRITE_REQ;&#xD;&#xA;//AtomQuad1_to_BUS.time_stamp = cf_time_stamp();&#xD;&#xA;//AtomQuad1_to_BUS_trans.set_time_stamp_now();&#xD;&#xA;//AtomQuad1_to_BUS_trans.set_user_data_length(cf_dt::cf_data_size(64,CF_BYTE));" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                    <statements xsi:type="cofluent:OutputAction" xmi:id="_oJdA7zBlEeyUlZFKI80e2g" name="OutAction2" previous="_oJdA7jBlEeyUlZFKI80e2g" next="__rwVcO2SEeyVp--j9k5gbQ" port="_oJdA5TBlEeyUlZFKI80e2g" duration=" ns" condition="" priority="" vectorSize="" blocking="true" call=""/>
                    <statements xsi:type="cofluent:LoopStatement" xmi:id="_oJdA8DBlEeyUlZFKI80e2g" name="Loop" firstStatement="_oJdA6zBlEeyUlZFKI80e2g" lastStatement="__rwVcO2SEeyVp--j9k5gbQ" previous="_oJdA6DBlEeyUlZFKI80e2g"/>
                    <statements xsi:type="cofluent:InputAction" xmi:id="__rwVcO2SEeyVp--j9k5gbQ" name="InAction3" documentation="" isLastOf="_oJdA8DBlEeyUlZFKI80e2g" previous="_oJdA7zBlEeyUlZFKI80e2g" port="_IdYjIO2TEeyVp--j9k5gbQ" timeout=" ns" priority="" duration=" ns" vectorSize="" condition=""/>
                  </refinement>
                </models>
                <models xsi:type="cofluent:Function" xmi:id="_oJdA8TBlEeyUlZFKI80e2g" name="AtomQuad1_Interface" target="" declarations="public:&#xD;&#xA;&#x9;void notify( int addr );" definitions="void cfm_atomquad1_interface::notify( int addr)&#xD;&#xA;{  &#xD;&#xA;&#x9;if (LOG_LEVEL == 1){&#xD;&#xA;&#x9;cf_trace_report(&quot;addr: %d&quot;,addr);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;//MsgQ.addr = addr;&#xD;&#xA;&#x9;p_mq_MsgQ.send( &amp;MsgQ_trans);&#xD;&#xA;&#x9;if (LOG_LEVEL == 1){&#xD;&#xA;&#x9;cf_trace_report(&quot;EXIT&quot;);&#xD;&#xA;&#x9;}&#xD;&#xA;}" includeInheritedHeader="" inheritanceClass="" callToInheritedConstructors="" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
                  <ports xmi:id="_oJdA8jBlEeyUlZFKI80e2g" name="MsgQ" type="MESSAGE_QUEUE" direction="OUT" relations="_oJdA9TBlEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                    <constructorArguments></constructorArguments>
                    <templateArguments></templateArguments>
                  </ports>
                  <refinement xsi:type="cofluent:Behavior" xmi:id="_oJdA8zBlEeyUlZFKI80e2g" name="AtomQuad1_InterfaceBh" firstStatement="_oJdA9DBlEeyUlZFKI80e2g">
                    <statements xsi:type="cofluent:Operation" xmi:id="_oJdA9DBlEeyUlZFKI80e2g" name="Operation" isFirstOf="_oJdA8zBlEeyUlZFKI80e2g" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                  </refinement>
                </models>
                <relations xsi:type="cofluent:MessageQueue" xmi:id="_oJdA9TBlEeyUlZFKI80e2g" name="MsgQ" ports="_oJdA8jBlEeyUlZFKI80e2g" policy="INFINITE" capacity="10000" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD">
                  <relationType xsi:type="cofluent:RelationPredefinedType" xmi:id="_oJdA9jBlEeyUlZFKI80e2g"/>
                </relations>
              </refinement>
            </models>
            <models xsi:type="cofluent:Function" xmi:id="_iDb8ng0hEe2Av5vOkNLtDA" name="BigCore0" target="" includeInheritedHeader="" inheritanceClass="" callToInheritedConstructors="" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
              <ports xmi:id="_iDb8nw0hEe2Av5vOkNLtDA" name="Routing_BigCore0" type="MESSAGE_QUEUE" direction="IN" port="_p0rqYA0hEe2Av5vOkNLtDA" ports="_iDb8pA0hEe2Av5vOkNLtDA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                <constructorArguments></constructorArguments>
                <templateArguments></templateArguments>
              </ports>
              <ports xmi:id="_INat8Q0jEe2Av5vOkNLtDA" name="BigCore0_to_BUS" type="MESSAGE_QUEUE" direction="OUT" port="_INat8A0jEe2Av5vOkNLtDA" ports="_XklsQA0jEe2Av5vOkNLtDA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                <constructorArguments></constructorArguments>
                <templateArguments></templateArguments>
              </ports>
              <ports xmi:id="_KAnJ4Q0jEe2Av5vOkNLtDA" name="BUS_to_BigCore0" type="MESSAGE_QUEUE" direction="IN" port="_KAnJ4A0jEe2Av5vOkNLtDA" ports="_YL7ZEA0jEe2Av5vOkNLtDA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                <constructorArguments></constructorArguments>
                <templateArguments></templateArguments>
              </ports>
              <refinement xsi:type="cofluent:Structure" xmi:id="_iDb8og0hEe2Av5vOkNLtDA" name="BigCore0St">
                <models xsi:type="cofluent:Function" xmi:id="_iDb8ow0hEe2Av5vOkNLtDA" name="Producer" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
                  <ports xmi:id="_iDb8pA0hEe2Av5vOkNLtDA" name="Routing_BigCore0" type="MESSAGE_QUEUE" direction="IN" inputActions="_iDb8qQ0hEe2Av5vOkNLtDA" port="_iDb8nw0hEe2Av5vOkNLtDA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                    <constructorArguments></constructorArguments>
                    <templateArguments></templateArguments>
                  </ports>
                  <ports xmi:id="_XklsQA0jEe2Av5vOkNLtDA" name="BigCore0_to_BUS" type="MESSAGE_QUEUE" direction="OUT" outputActions="_q1ZEAA0iEe2Av5vOkNLtDA" port="_INat8Q0jEe2Av5vOkNLtDA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                    <constructorArguments></constructorArguments>
                    <templateArguments></templateArguments>
                  </ports>
                  <ports xmi:id="_YL7ZEA0jEe2Av5vOkNLtDA" name="BUS_to_BigCore0" type="MESSAGE_QUEUE" direction="IN" inputActions="_5owxuQ0iEe2Av5vOkNLtDA" port="_KAnJ4Q0jEe2Av5vOkNLtDA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                    <constructorArguments></constructorArguments>
                    <templateArguments></templateArguments>
                  </ports>
                  <refinement xsi:type="cofluent:Behavior" xmi:id="_iDb8pw0hEe2Av5vOkNLtDA" name="ProducerBh" firstStatement="_iDb8qA0hEe2Av5vOkNLtDA">
                    <statements xsi:type="cofluent:Operation" xmi:id="_iDb8qA0hEe2Av5vOkNLtDA" name="init" isFirstOf="_iDb8pw0hEe2Av5vOkNLtDA" next="_iDb8rA0hEe2Av5vOkNLtDA" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                    <statements xsi:type="cofluent:InputAction" xmi:id="_iDb8qQ0hEe2Av5vOkNLtDA" name="InAction2" documentation="" isFirstOf="_iDb8rA0hEe2Av5vOkNLtDA" next="_iDb8qg0hEe2Av5vOkNLtDA" port="_iDb8pA0hEe2Av5vOkNLtDA" timeout=" ns" priority="" duration=" ns" vectorSize="" blocking="true" condition=""/>
                    <statements xsi:type="cofluent:Operation" xmi:id="_iDb8qg0hEe2Av5vOkNLtDA" name="process" previous="_iDb8qQ0hEe2Av5vOkNLtDA" next="_q1ZEAA0iEe2Av5vOkNLtDA" algorithm="cf_trace_report (&quot;****Reached BigCore0 *****&quot;);&#xD;&#xA;BigCore0_to_BUS_trans = Routing_BigCore0_trans;&#xD;&#xA;BigCore0_to_BUS.plf_source = BIGCORE0_ID;&#xD;&#xA;" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                    <statements xsi:type="cofluent:LoopStatement" xmi:id="_iDb8rA0hEe2Av5vOkNLtDA" name="Loop" firstStatement="_iDb8qQ0hEe2Av5vOkNLtDA" lastStatement="_5owxuQ0iEe2Av5vOkNLtDA" previous="_iDb8qA0hEe2Av5vOkNLtDA"/>
                    <statements xsi:type="cofluent:OutputAction" xmi:id="_q1ZEAA0iEe2Av5vOkNLtDA" name="OutAction" previous="_iDb8qg0hEe2Av5vOkNLtDA" next="_5owxuQ0iEe2Av5vOkNLtDA" port="_XklsQA0jEe2Av5vOkNLtDA" duration=" ns" condition="" priority="" vectorSize="" blocking="true" call=""/>
                    <statements xsi:type="cofluent:InputAction" xmi:id="_5owxuQ0iEe2Av5vOkNLtDA" name="InAction3" documentation="" isLastOf="_iDb8rA0hEe2Av5vOkNLtDA" previous="_q1ZEAA0iEe2Av5vOkNLtDA" port="_YL7ZEA0jEe2Av5vOkNLtDA" timeout=" ns" priority="" duration=" ns" vectorSize="" condition=""/>
                  </refinement>
                </models>
                <models xsi:type="cofluent:Function" xmi:id="_iDb8rg0hEe2Av5vOkNLtDA" name="BigCore0_Interface" target="" declarations="public:&#xD;&#xA;&#x9;void notify( int addr );" definitions="void cfm_bigcore0_interface::notify( int addr)&#xD;&#xA;{  &#xD;&#xA;&#x9;if (LOG_LEVEL == 1){&#xD;&#xA;&#x9;cf_trace_report(&quot;addr: %d&quot;,addr);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;//MsgQ.addr = addr;&#xD;&#xA;&#x9;p_mq_MsgQ.send( &amp;MsgQ_trans);&#xD;&#xA;&#x9;if (LOG_LEVEL == 1){&#xD;&#xA;&#x9;cf_trace_report(&quot;EXIT&quot;);&#xD;&#xA;&#x9;}&#xD;&#xA;}" includeInheritedHeader="" inheritanceClass="" callToInheritedConstructors="" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
                  <ports xmi:id="_iDb8rw0hEe2Av5vOkNLtDA" name="MsgQ" type="MESSAGE_QUEUE" direction="OUT" relations="_iDb8sg0hEe2Av5vOkNLtDA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                    <constructorArguments></constructorArguments>
                    <templateArguments></templateArguments>
                  </ports>
                  <refinement xsi:type="cofluent:Behavior" xmi:id="_iDb8sA0hEe2Av5vOkNLtDA" name="BigCore0_InterfaceBh" firstStatement="_iDb8sQ0hEe2Av5vOkNLtDA">
                    <statements xsi:type="cofluent:Operation" xmi:id="_iDb8sQ0hEe2Av5vOkNLtDA" name="Operation" isFirstOf="_iDb8sA0hEe2Av5vOkNLtDA" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                  </refinement>
                </models>
                <relations xsi:type="cofluent:MessageQueue" xmi:id="_iDb8sg0hEe2Av5vOkNLtDA" name="MsgQ" ports="_iDb8rw0hEe2Av5vOkNLtDA" policy="INFINITE" capacity="10000" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD">
                  <relationType xsi:type="cofluent:RelationPredefinedType" xmi:id="_iDb8sw0hEe2Av5vOkNLtDA"/>
                </relations>
              </refinement>
            </models>
            <models xsi:type="cofluent:Function" xmi:id="_lIcWFw0nEe2Av5vOkNLtDA" name="BigCore1" target="" includeInheritedHeader="" inheritanceClass="" callToInheritedConstructors="" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
              <ports xmi:id="_lIcWGA0nEe2Av5vOkNLtDA" name="Routing_BigCore1" type="MESSAGE_QUEUE" direction="IN" port="_rB41oA0nEe2Av5vOkNLtDA" ports="_lIcWHQ0nEe2Av5vOkNLtDA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                <constructorArguments></constructorArguments>
                <templateArguments></templateArguments>
              </ports>
              <refinement xsi:type="cofluent:Structure" xmi:id="_lIcWGw0nEe2Av5vOkNLtDA" name="BigCore1St">
                <models xsi:type="cofluent:Function" xmi:id="_lIcWHA0nEe2Av5vOkNLtDA" name="Producer" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
                  <ports xmi:id="_lIcWHQ0nEe2Av5vOkNLtDA" name="Routing_BigCore1" type="MESSAGE_QUEUE" direction="IN" inputActions="_lIcWIg0nEe2Av5vOkNLtDA" port="_lIcWGA0nEe2Av5vOkNLtDA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                    <constructorArguments></constructorArguments>
                    <templateArguments></templateArguments>
                  </ports>
                  <refinement xsi:type="cofluent:Behavior" xmi:id="_lIcWIA0nEe2Av5vOkNLtDA" name="ProducerBh" firstStatement="_lIcWIQ0nEe2Av5vOkNLtDA">
                    <statements xsi:type="cofluent:Operation" xmi:id="_lIcWIQ0nEe2Av5vOkNLtDA" name="init" isFirstOf="_lIcWIA0nEe2Av5vOkNLtDA" next="_lIcWJA0nEe2Av5vOkNLtDA" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                    <statements xsi:type="cofluent:InputAction" xmi:id="_lIcWIg0nEe2Av5vOkNLtDA" name="InAction2" documentation="" isFirstOf="_lIcWJA0nEe2Av5vOkNLtDA" next="_lIcWIw0nEe2Av5vOkNLtDA" port="_lIcWHQ0nEe2Av5vOkNLtDA" timeout=" ns" priority="" duration=" ns" vectorSize="" blocking="true" condition=""/>
                    <statements xsi:type="cofluent:Operation" xmi:id="_lIcWIw0nEe2Av5vOkNLtDA" name="process" isLastOf="_lIcWJA0nEe2Av5vOkNLtDA" previous="_lIcWIg0nEe2Av5vOkNLtDA" algorithm="cf_trace_report (&quot;****Reached BigCore1 *****&quot;);&#xD;&#xA;//AtomQuad1_to_BUS_trans = Routing_AtomQuad1_trans;&#xD;&#xA;//AtomQuad1_to_BUS.plf_source = ATOMQUAD1_ID;&#xD;&#xA;" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                    <statements xsi:type="cofluent:LoopStatement" xmi:id="_lIcWJA0nEe2Av5vOkNLtDA" name="Loop" firstStatement="_lIcWIg0nEe2Av5vOkNLtDA" lastStatement="_lIcWIw0nEe2Av5vOkNLtDA" previous="_lIcWIQ0nEe2Av5vOkNLtDA"/>
                  </refinement>
                </models>
                <models xsi:type="cofluent:Function" xmi:id="_lIcWJw0nEe2Av5vOkNLtDA" name="BigCore1_Interface" target="" declarations="public:&#xD;&#xA;&#x9;void notify( int addr );" definitions="void cfm_bigcore1_interface::notify( int addr)&#xD;&#xA;{  &#xD;&#xA;&#x9;if (LOG_LEVEL == 1){&#xD;&#xA;&#x9;cf_trace_report(&quot;addr: %d&quot;,addr);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;//MsgQ.addr = addr;&#xD;&#xA;&#x9;p_mq_MsgQ.send( &amp;MsgQ_trans);&#xD;&#xA;&#x9;if (LOG_LEVEL == 1){&#xD;&#xA;&#x9;cf_trace_report(&quot;EXIT&quot;);&#xD;&#xA;&#x9;}&#xD;&#xA;}" includeInheritedHeader="" inheritanceClass="" callToInheritedConstructors="" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
                  <ports xmi:id="_lIcWKA0nEe2Av5vOkNLtDA" name="MsgQ" type="MESSAGE_QUEUE" direction="OUT" relations="_lIcWKw0nEe2Av5vOkNLtDA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                    <constructorArguments></constructorArguments>
                    <templateArguments></templateArguments>
                  </ports>
                  <refinement xsi:type="cofluent:Behavior" xmi:id="_lIcWKQ0nEe2Av5vOkNLtDA" name="BigCore1_InterfaceBh" firstStatement="_lIcWKg0nEe2Av5vOkNLtDA">
                    <statements xsi:type="cofluent:Operation" xmi:id="_lIcWKg0nEe2Av5vOkNLtDA" name="Operation" isFirstOf="_lIcWKQ0nEe2Av5vOkNLtDA" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                  </refinement>
                </models>
                <relations xsi:type="cofluent:MessageQueue" xmi:id="_lIcWKw0nEe2Av5vOkNLtDA" name="MsgQ" ports="_lIcWKA0nEe2Av5vOkNLtDA" policy="INFINITE" capacity="10000" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD">
                  <relationType xsi:type="cofluent:RelationPredefinedType" xmi:id="_lIcWLA0nEe2Av5vOkNLtDA"/>
                </relations>
              </refinement>
            </models>
          </refinement>
        </models>
        <models xsi:type="cofluent:Function" xmi:id="_3qYAsC9rEeyUlZFKI80e2g" name="LLC_Memory_Function" target="" includeInheritedHeader="" inheritanceClass="" callToInheritedConstructors="" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
          <ports xmi:id="_m0w3IDBrEeyUlZFKI80e2g" name="BUS_to_LLC" type="MESSAGE_QUEUE" direction="IN" relations="_imZZSTBrEeyUlZFKI80e2g" ports="_Q2ENEC9sEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <ports xmi:id="_r0F34DBrEeyUlZFKI80e2g" name="LLC_to_BUS" type="MESSAGE_QUEUE" direction="OUT" relations="_onjqeTBrEeyUlZFKI80e2g" ports="_Z3-5gC9sEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <refinement xsi:type="cofluent:Structure" xmi:id="_7XhA0C9rEeyUlZFKI80e2g" name="LLC_Memory_FunctionSt">
            <models xsi:type="cofluent:Function" xmi:id="_7Xhn4C9rEeyUlZFKI80e2g" name="ProcessingFunction" declarations="DefPacket frame;&#xD;&#xA;bool read_request;&#xD;&#xA;cf_dt::cf_data_size frame_size;&#xD;&#xA;&#xD;&#xA;int random_value;&#xD;&#xA;bool memory_access;&#xD;&#xA;cf_dt::cf_time access_duration;" initializations="read_request = false;&#xD;&#xA;//frame_size = cf_dt::cf_data_size(10,CF_BYTE);&#xD;&#xA;frame_size = cf_dt::cf_data_size(sizeof(DefPacket),CF_BYTE);&#xD;&#xA;random_value = 0;&#xD;&#xA;memory_access = false;&#xD;&#xA;access_duration = cf_dt::cf_time(0,CF_US);" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
              <ports xmi:id="_Q2ENEC9sEeyUlZFKI80e2g" name="BUS_to_LLC" type="MESSAGE_QUEUE" direction="IN" inputActions="_7XkEJC9rEeyUlZFKI80e2g" port="_m0w3IDBrEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                <constructorArguments></constructorArguments>
                <templateArguments></templateArguments>
              </ports>
              <ports xmi:id="_Z3-5gC9sEeyUlZFKI80e2g" name="LLC_to_BUS" type="MESSAGE_QUEUE" direction="OUT" outputActions="_7XkEJS9rEeyUlZFKI80e2g" port="_r0F34DBrEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
                <constructorArguments></constructorArguments>
                <templateArguments></templateArguments>
              </ports>
              <refinement xsi:type="cofluent:Behavior" xmi:id="_7XkEIC9rEeyUlZFKI80e2g" name="ProcessingFunctionBh" firstStatement="_7XkEIS9rEeyUlZFKI80e2g">
                <statements xsi:type="cofluent:Operation" xmi:id="_7XkEIS9rEeyUlZFKI80e2g" name="init" isFirstOf="_7XkEIC9rEeyUlZFKI80e2g" next="_7XkEIi9rEeyUlZFKI80e2g" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                <statements xsi:type="cofluent:LoopStatement" xmi:id="_7XkEIi9rEeyUlZFKI80e2g" name="Loop" firstStatement="_7XkEJC9rEeyUlZFKI80e2g" lastStatement="_7XkEJS9rEeyUlZFKI80e2g" previous="_7XkEIS9rEeyUlZFKI80e2g" condition=""/>
                <statements xsi:type="cofluent:Operation" xmi:id="_7XkEIy9rEeyUlZFKI80e2g" name="process" previous="_7XkEJC9rEeyUlZFKI80e2g" next="_7XkEJS9rEeyUlZFKI80e2g" algorithm="if (LOG_LEVEL == 1){&#xD;&#xA;cf_trace_report(&quot;Request received from: %d&quot;,BUS_to_LLC.source);&#xD;&#xA;}&#xD;&#xA;LLC_to_BUS_trans = BUS_to_LLC_trans;&#xD;&#xA;LLC_to_BUS.source = LLC_MEMORY_FUNCTION_ID;&#xD;&#xA;LLC_to_BUS.destination = BUS_to_LLC.plf_source;&#xD;&#xA;&#xD;&#xA;if (BUS_to_LLC.packet_type == READ_REQ)&#xD;&#xA;{&#xD;&#xA;read_request = true;&#xD;&#xA;cf_trace_report(&quot;Read request received&quot;);&#xD;&#xA;LLC_to_BUS_trans.set_user_data_length(frame_size);&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;read_request = false;&#xD;&#xA;cf_trace_report(&quot;Write request received&quot;);&#xD;&#xA;frame_size = BUS_to_LLC_trans.get_user_data_length();&#xD;&#xA;//cf_trace_report(&quot;frame_size: %d&quot;,frame_size.to_scalar(CF_BYTE));&#xD;&#xA;cf_trace_report(&quot;frame_size: %.3f&quot;,frame_size.to_scalar(CF_BYTE) );&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if (CACHE_MEMORY_ENABLE)&#xD;&#xA;{&#xD;&#xA;&#x9;total_cache_access++;&#xD;&#xA;&#x9;if (BUS_to_LLC.packet_type == READ_REQ)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;total_cache_read_access++;&#xD;&#xA;&#x9;&#x9;// check if data is in cache. currently it is randomly calculated&#xD;&#xA;&#x9;&#x9;random_value = cf_util_rand_int(0,99);&#xD;&#xA;&#x9;&#x9;if(random_value &lt; CACHE_MEMORY_HIT_RATIO.get_value())&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;total_cache_hit++;&#xD;&#xA;&#x9;&#x9;&#x9;memory_access = false;&#xD;&#xA;&#x9;&#x9;&#x9;// define memory access_duration&#xD;&#xA;&#x9;&#x9;&#x9;access_duration = CACHE_MEMORY_HIT_DELAY.get_value() + CACHE_MEMORY_LOOKUP_LATENCY.get_value(); &#xD;&#xA;&#x9;&#x9;} &#xD;&#xA;&#x9;&#x9;else &#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;total_cache_miss++;&#xD;&#xA;&#x9;&#x9;&#x9;memory_access = true;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;total_cache_write_access++;&#xD;&#xA;&#x9;&#x9;// check if data is merged into memory&#xD;&#xA;&#x9;&#x9;random_value = cf_util_rand_int(0,99);&#xD;&#xA;&#x9;&#x9;if(random_value &lt; MEMORY_WRITE_MERGE_RATIO.get_value())&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;total_cache_write_merged++;&#xD;&#xA;&#x9;&#x9;&#x9;memory_access = false;&#xD;&#xA;&#x9;&#x9;&#x9;// define memory access_duration&#xD;&#xA;&#x9;&#x9;&#x9;access_duration = CACHE_MEMORY_MERGE_DELAY.get_value() + CACHE_MEMORY_LOOKUP_LATENCY.get_value();&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;total_cache_write_not_merged++;&#xD;&#xA;&#x9;&#x9;&#x9;memory_access = true;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#x9;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;&#x9;//Always access memroy&#xD;&#xA;&#x9;memory_access = true;&#xD;&#xA;}&#xD;&#xA;if(memory_access)&#xD;&#xA;{&#xD;&#xA;&#x9;total_memory_access++;&#xD;&#xA;&#x9;random_value = cf_util_rand_int(0,99);&#xD;&#xA;&#x9;// calculate access duration - worst case&#xD;&#xA;&#x9;if(random_value &lt; 14)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;access_duration = cf_dt::cf_time(cf_get_current_cycle_period().to_scalar(CF_US)*400, CF_US);&#xD;&#xA;&#x9;&#x9;total_slow_memory_access++;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;// calculate access duration - average case&#xD;&#xA;&#x9;if(random_value >= 14 &amp;&amp; random_value &lt;=85)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;access_duration = cf_dt::cf_time(cf_get_current_cycle_period().to_scalar(CF_US)*80, CF_US);&#xD;&#xA;&#x9;&#x9;total_average_memory_access++;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;// calculate access duration - best case&#xD;&#xA;&#x9;if(random_value > 85)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;access_duration = cf_dt::cf_time(cf_get_current_cycle_period().to_scalar(CF_US)*30, CF_US);&#xD;&#xA;&#x9;&#x9;total_fast_memory_access++;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
                <statements xsi:type="cofluent:InputAction" xmi:id="_7XkEJC9rEeyUlZFKI80e2g" name="InAction" isFirstOf="_7XkEIi9rEeyUlZFKI80e2g" next="_7XkEIy9rEeyUlZFKI80e2g" port="_Q2ENEC9sEeyUlZFKI80e2g" timeout=" ns" priority="" duration=" ns" vectorSize="" blocking="true" condition=""/>
                <statements xsi:type="cofluent:OutputAction" xmi:id="_7XkEJS9rEeyUlZFKI80e2g" name="OutAction" isLastOf="_7XkEIi9rEeyUlZFKI80e2g" previous="_7XkEIy9rEeyUlZFKI80e2g" port="_Z3-5gC9sEeyUlZFKI80e2g" duration=" ns" condition="" priority="" vectorSize="" call=""/>
              </refinement>
            </models>
          </refinement>
        </models>
        <models xsi:type="cofluent:Function" xmi:id="_jaBggDBpEeyUlZFKI80e2g" name="BUS" target="" declarations="int x;&#xD;&#xA;&#xD;&#xA;DefPacket frame;&#xD;&#xA;&#xD;&#xA;cf_dt::cf_time message_time_stamp;&#xD;&#xA;cf_dt::cf_data_size message_size;&#xD;&#xA;&#xD;&#xA;cf_dt::cf_time oldest_message_time_stamp;&#xD;&#xA;//cf_dt::cf_time PHY_to_BUS_msg_time_stamp;&#xD;&#xA;cf_dt::cf_time LLC_to_BUS_msg_time_stamp;&#xD;&#xA;cf_dt::cf_time AtomQuad0_to_BUS_msg_time_stamp;&#xD;&#xA;cf_dt::cf_time AtomQuad1_to_BUS_msg_time_stamp;&#xD;&#xA;cf_dt::cf_time BigCore0_to_BUS_msg_time_stamp;&#xD;&#xA;cf_dt::cf_time BigCore1_to_BUS_msg_time_stamp;&#xD;&#xA;//cf_dt::cf_time GT_to_BUS_msg_time_stamp;&#xD;&#xA;&#xD;&#xA;//cft_defpacket* PHY_to_BUS_trans_ptr;&#xD;&#xA;cft_defpacket* LLC_to_BUS_trans_ptr;&#xD;&#xA;cft_defpacket* AtomQuad0_to_BUS_trans_ptr;&#xD;&#xA;cft_defpacket* AtomQuad1_to_BUS_trans_ptr;&#xD;&#xA;cft_defpacket* BigCore0_to_BUS_trans_ptr;&#xD;&#xA;cft_defpacket* BigCore1_to_BUS_trans_ptr;&#xD;&#xA;//cft_defpacket* GT_to_BUS_trans_ptr;&#xD;&#xA;&#xD;&#xA;int PHY_to_BUS_priority; &#xD;&#xA;int LLC_to_BUS_priority; &#xD;&#xA;int AtomQuad0_to_BUS_priority; &#xD;&#xA;int AtomQuad1_to_BUS_priority; &#xD;&#xA;int BigCore0_to_BUS_priority; &#xD;&#xA;int BigCore1_to_BUS_priority; &#xD;&#xA;int GT_to_BUS_priority; " initializations="x = 0;" includeInheritedHeader="" inheritanceClass="" callToInheritedConstructors="" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" coSimulationType="NONE_COSIM">
          <ports xmi:id="_ReKtADBrEeyUlZFKI80e2g" name="AtomQuad0_to_BUS" type="MESSAGE_QUEUE" direction="IN" inputActions="_Lj1SADBqEeyUlZFKI80e2g" relations="_AGiUsC9sEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <ports xmi:id="_l5loUDBrEeyUlZFKI80e2g" name="BUS_to_LLC" type="MESSAGE_QUEUE" direction="OUT" outputActions="_3BI0kDBqEeyUlZFKI80e2g" relations="_imZZSTBrEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <ports xmi:id="_sLYWgDBrEeyUlZFKI80e2g" name="LLC_to_BUS" type="MESSAGE_QUEUE" direction="IN" inputActions="_MUZzUDBqEeyUlZFKI80e2g" relations="_onjqeTBrEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <ports xmi:id="_jTxAIDBsEeyUlZFKI80e2g" name="AtomQuad1_to_BUS" type="MESSAGE_QUEUE" direction="IN" inputActions="_vD_-4DBqEeyUlZFKI80e2g" relations="_LUDQ8DBnEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <ports xmi:id="_WlHvUO2SEeyk8YlLdndsRA" name="BUS_to_AtomQuad0" type="MESSAGE_QUEUE" direction="OUT" outputActions="_4kZ-IDBqEeyUlZFKI80e2g" relations="_JOsgye2SEeyk8YlLdndsRA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <ports xmi:id="_4y1V0O2SEeyVp--j9k5gbQ" name="BUS_to_AtomQuad1" type="MESSAGE_QUEUE" direction="OUT" outputActions="_5Z0jMDBqEeyUlZFKI80e2g" relations="_1zqO-e2SEeyVp--j9k5gbQ" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <ports xmi:id="_IqoOYA0jEe2Av5vOkNLtDA" name="BigCore0_to_BUS" type="MESSAGE_QUEUE" direction="IN" inputActions="_jfY07g0kEe2Av5vOkNLtDA" relations="_C8gOBA0jEe2Av5vOkNLtDA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <ports xmi:id="_JVP4sA0jEe2Av5vOkNLtDA" name="BUS_to_BigCore0" type="MESSAGE_QUEUE" direction="OUT" outputActions="_2Xaq3g0kEe2Av5vOkNLtDA" relations="_C8gN-Q0jEe2Av5vOkNLtDA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
            <constructorArguments></constructorArguments>
            <templateArguments></templateArguments>
          </ports>
          <refinement xsi:type="cofluent:Behavior" xmi:id="_6Y-IgDBpEeyUlZFKI80e2g" name="BUSBh" firstStatement="_6Y-IgTBpEeyUlZFKI80e2g">
            <statements xsi:type="cofluent:LoopStatement" xmi:id="_6Y-IgTBpEeyUlZFKI80e2g" name="Loop" isFirstOf="_6Y-IgDBpEeyUlZFKI80e2g" firstStatement="_7_KDMDBpEeyUlZFKI80e2g" lastStatement="_WJ7uADBqEeyUlZFKI80e2g"/>
            <statements xsi:type="cofluent:Operation" xmi:id="_7_KDMDBpEeyUlZFKI80e2g" name="FIFO_Algorithm" isFirstOf="_6Y-IgTBpEeyUlZFKI80e2g" next="_EqO88DBqEeyUlZFKI80e2g" algorithm="//Find the oldest in the message queues&#xD;&#xA;&#x9;if(BUS_POLICY == FIFO_BUS)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;//Init variable&#xD;&#xA;&#x9;&#x9;oldest_message_time_stamp = cf_dt::cf_time(1, CF_HR);&#xD;&#xA;&#x9;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;//Check if LLC_to_BUS contains a message&#xD;&#xA;&#x9;&#x9;if(p_mq_LLC_to_BUS.get_message_queue().get_msg_count() > 0)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;//Peek the first message&#xD;&#xA;&#x9;&#x9;&#x9;LLC_to_BUS_trans_ptr = p_mq_LLC_to_BUS.get_message_queue().peek();&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;//Get the time stamp&#xD;&#xA;&#x9;&#x9;&#x9;LLC_to_BUS_msg_time_stamp = LLC_to_BUS_trans_ptr->get_time_stamp();&#xD;&#xA;&#x9;&#x9;&#x9;//cf_trace_report(&quot;MsgQ1 msg time stamp = %s&quot;, msgq1_msg_time_stamp.to_c_str());&#xD;&#xA;&#x9;&#x9;&#x9;if (LOG_LEVEL == 2){&#xD;&#xA;&#x9;&#x9;&#x9;cf_trace_report(&quot;LLC_to_BUS msg time stamp = %s&quot;, LLC_to_BUS_msg_time_stamp.to_c_str());&#xD;&#xA;&#x9;&#x9;&#x9;cf_trace_report(&quot;oldest msg time stamp = %s&quot;, oldest_message_time_stamp.to_c_str());&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;//Check if the message in the queue is the oldest&#xD;&#xA;&#x9;&#x9;&#x9;if( LLC_to_BUS_msg_time_stamp &lt; oldest_message_time_stamp)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (LOG_LEVEL == 2){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;cf_trace_report(&quot;Check if msg time stamp in the queue is the oldest for LLC_to_BUS &quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;//Update oldest message time stamp&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;oldest_message_time_stamp = LLC_to_BUS_msg_time_stamp;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;//Adjust prioritites accordingly&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PHY_to_BUS_priority   = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LLC_to_BUS_priority   = 1;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;AtomQuad0_to_BUS_priority = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;AtomQuad1_to_BUS_priority = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;BigCore0_to_BUS_priority = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;BigCore1_to_BUS_priority = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;GT_to_BUS_priority = 0;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;//Check if AtomQuad0_to_BUS contains a message&#xD;&#xA;&#x9;&#x9;if(p_mq_AtomQuad0_to_BUS.get_message_queue().get_msg_count() > 0)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;//Peek the first message&#xD;&#xA;&#x9;&#x9;&#x9;AtomQuad0_to_BUS_trans_ptr = p_mq_AtomQuad0_to_BUS.get_message_queue().peek();&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;//Get the time stamp&#xD;&#xA;&#x9;&#x9;&#x9;AtomQuad0_to_BUS_msg_time_stamp = AtomQuad0_to_BUS_trans_ptr->get_time_stamp();&#xD;&#xA;&#x9;&#x9;&#x9;//cf_trace_report(&quot;MsgQ1 msg time stamp = %s&quot;, msgq1_msg_time_stamp.to_c_str());&#xD;&#xA;&#x9;&#x9;&#x9;if (LOG_LEVEL == 2){&#xD;&#xA;&#x9;&#x9;&#x9;cf_trace_report(&quot;AtomQuad0_to_BUS msg time stamp = %s&quot;, AtomQuad0_to_BUS_msg_time_stamp.to_c_str());&#xD;&#xA;&#x9;&#x9;&#x9;cf_trace_report(&quot;oldest msg time stamp = %s&quot;, oldest_message_time_stamp.to_c_str());&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;//Check if the message in the queue is the oldest&#xD;&#xA;&#x9;&#x9;&#x9;if( AtomQuad0_to_BUS_msg_time_stamp &lt; oldest_message_time_stamp)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (LOG_LEVEL == 2){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;cf_trace_report(&quot;Check if the msg time stamp in the queue is the oldest for AtomQuad0_to_BUS &quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;//Update oldest message time stamp&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;oldest_message_time_stamp = AtomQuad0_to_BUS_msg_time_stamp;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;//Adjust prioritites accordingly&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PHY_to_BUS_priority   = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LLC_to_BUS_priority   = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;AtomQuad0_to_BUS_priority = 1;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;AtomQuad1_to_BUS_priority = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;BigCore0_to_BUS_priority = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;BigCore1_to_BUS_priority = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;GT_to_BUS_priority = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;//cf_trace_report(&quot;Setting priority for AtomQuad0_to_BUS_priority&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;//Check if AtomQuad1_to_BUS contains a message&#xD;&#xA;&#x9;&#x9;if(p_mq_AtomQuad1_to_BUS.get_message_queue().get_msg_count() > 0)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;//cf_trace_report(&quot;Check if AtomQuad1_to_BUS contains a message&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;//Peek the first message&#xD;&#xA;&#x9;&#x9;&#x9;AtomQuad1_to_BUS_trans_ptr = p_mq_AtomQuad1_to_BUS.get_message_queue().peek();&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;//Get the time stamp&#xD;&#xA;&#x9;&#x9;&#x9;AtomQuad1_to_BUS_msg_time_stamp = AtomQuad1_to_BUS_trans_ptr->get_time_stamp();&#xD;&#xA;&#x9;&#x9;&#x9;if (LOG_LEVEL == 2){&#xD;&#xA;&#x9;&#x9;&#x9;cf_trace_report(&quot;AtomQuad1_to_BUS msg time stamp = %s&quot;, AtomQuad1_to_BUS_msg_time_stamp.to_c_str());&#xD;&#xA;&#x9;&#x9;&#x9;cf_trace_report(&quot;oldest msg time stamp = %s&quot;, oldest_message_time_stamp.to_c_str());&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;//Check if the message in the queue is the oldest&#xD;&#xA;&#x9;&#x9;&#x9;if( AtomQuad1_to_BUS_msg_time_stamp &lt; oldest_message_time_stamp)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (LOG_LEVEL == 2){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;cf_trace_report(&quot;Check if the msg time stamp in the queue is the oldest for AtomQuad1_to_BUS &quot;);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;//Update oldest message time stamp&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;oldest_message_time_stamp = AtomQuad1_to_BUS_msg_time_stamp;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;//Adjust prioritites accordingly&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PHY_to_BUS_priority   = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LLC_to_BUS_priority   = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;AtomQuad0_to_BUS_priority = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;AtomQuad1_to_BUS_priority = 1;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;BigCore0_to_BUS_priority = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;BigCore1_to_BUS_priority = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;GT_to_BUS_priority       = 0;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;//Check if BigCore0_to_BUS contains a message&#xD;&#xA;&#x9;&#x9;if(p_mq_BigCore0_to_BUS.get_message_queue().get_msg_count() > 0)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;//Peek the first message&#xD;&#xA;&#x9;&#x9;&#x9;BigCore0_to_BUS_trans_ptr = p_mq_BigCore0_to_BUS.get_message_queue().peek();&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;//Get the time stamp&#xD;&#xA;&#x9;&#x9;&#x9;BigCore0_to_BUS_msg_time_stamp = BigCore0_to_BUS_trans_ptr->get_time_stamp();&#xD;&#xA;&#x9;&#x9;&#x9;//cf_trace_report(&quot;MsgQ1 msg time stamp = %s&quot;, msgq1_msg_time_stamp.to_c_str());&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;//Check if the message in the queue is the oldest&#xD;&#xA;&#x9;&#x9;&#x9;if( BigCore0_to_BUS_msg_time_stamp &lt; oldest_message_time_stamp)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;//Update oldest message time stamp&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;oldest_message_time_stamp = BigCore0_to_BUS_msg_time_stamp;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;//Adjust prioritites accordingly&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;PHY_to_BUS_priority      = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;LLC_to_BUS_priority      = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;AtomQuad0_to_BUS_priority = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;AtomQuad1_to_BUS_priority = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;BigCore0_to_BUS_priority = 1;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;BigCore1_to_BUS_priority = 0;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;GT_to_BUS_priority       = 0;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;//&#x9;&#x9;//Check if BigCore1_to_BUS contains a message&#xD;&#xA;//&#x9;&#x9;if(p_mq_BigCore1_to_BUS.get_message_queue().get_msg_count() > 0)&#xD;&#xA;//&#x9;&#x9;{&#xD;&#xA;//&#x9;&#x9;&#x9;//Peek the first message&#xD;&#xA;//&#x9;&#x9;&#x9;BigCore1_to_BUS_trans_ptr = p_mq_BigCore1_to_BUS.get_message_queue().peek();&#xD;&#xA;//&#x9;&#x9;&#xD;&#xA;//&#x9;&#x9;&#x9;//Get the time stamp&#xD;&#xA;//&#x9;&#x9;&#x9;BigCore1_to_BUS_msg_time_stamp = BigCore1_to_BUS_trans_ptr->get_time_stamp();&#xD;&#xA;//&#x9;&#x9;&#x9;//cf_trace_report(&quot;MsgQ1 msg time stamp = %s&quot;, msgq1_msg_time_stamp.to_c_str());&#xD;&#xA;//&#x9;&#x9;&#xD;&#xA;//&#x9;&#x9;&#x9;//Check if the message in the queue is the oldest&#xD;&#xA;//&#x9;&#x9;&#x9;if( BigCore1_to_BUS_msg_time_stamp &lt; oldest_message_time_stamp)&#xD;&#xA;//&#x9;&#x9;&#x9;{&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;//Update oldest message time stamp&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;oldest_message_time_stamp = BigCore1_to_BUS_msg_time_stamp;&#xD;&#xA;//&#x9;&#x9;&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;//Adjust prioritites accordingly&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;PHY_to_BUS_priority       = 0;&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;LLC_to_BUS_priority       = 0;&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;AtomQuad0_to_BUS_priority = 0;&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;AtomQuad1_to_BUS_priority = 0;&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;BigCore0_to_BUS_priority  = 0;&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;BigCore1_to_BUS_priority  = 1;&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;GT_to_BUS_priority        = 0;&#xD;&#xA;//&#x9;&#x9;&#x9;}&#xD;&#xA;//&#x9;&#x9;}&#xD;&#xA;//&#x9;&#x9;&#xD;&#xA;//&#x9;&#x9;//Check if GT_to_BUS contains a message&#xD;&#xA;//&#x9;&#x9;if(p_mq_GT_to_BUS.get_message_queue().get_msg_count() > 0)&#xD;&#xA;//&#x9;&#x9;{&#xD;&#xA;//&#x9;&#x9;&#x9;//Peek the first message&#xD;&#xA;//&#x9;&#x9;&#x9;GT_to_BUS_trans_ptr = p_mq_GT_to_BUS.get_message_queue().peek();&#xD;&#xA;//&#x9;&#x9;&#xD;&#xA;//&#x9;&#x9;&#x9;//Get the time stamp&#xD;&#xA;//&#x9;&#x9;&#x9;GT_to_BUS_msg_time_stamp = GT_to_BUS_trans_ptr->get_time_stamp();&#xD;&#xA;//&#x9;&#x9;&#x9;//cf_trace_report(&quot;MsgQ1 msg time stamp = %s&quot;, msgq1_msg_time_stamp.to_c_str());&#xD;&#xA;//&#x9;&#x9;&#xD;&#xA;//&#x9;&#x9;&#x9;//Check if the message in the queue is the oldest&#xD;&#xA;//&#x9;&#x9;&#x9;if( GT_to_BUS_msg_time_stamp &lt; oldest_message_time_stamp)&#xD;&#xA;//&#x9;&#x9;&#x9;{&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;//Update oldest message time stamp&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;oldest_message_time_stamp = GT_to_BUS_msg_time_stamp;&#xD;&#xA;//&#x9;&#x9;&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;//Adjust prioritites accordingly&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;PHY_to_BUS_priority      = 0;&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;LLC_to_BUS_priority      = 0;&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;Atom0_to_BUS_priority    = 0;&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;Atom1_to_BUS_priority    = 0;&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;BigCore0_to_BUS_priority = 0;&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;BigCore1_to_BUS_priority = 0;&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;GT_to_BUS_priority       = 1;&#xD;&#xA;//&#x9;&#x9;&#x9;}&#xD;&#xA;//&#x9;&#x9;}&#xD;&#xA;if (LOG_LEVEL == 2){&#xD;&#xA;cf_trace_report(&quot;oldest - outer loop msg time stamp = %s&quot;, oldest_message_time_stamp.to_c_str());&#xD;&#xA;}&#xD;&#xA;}" executionTime="0 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:MultipleGuardedStatement" xmi:id="_EqO88DBqEeyUlZFKI80e2g" name="MultipleWait" previous="_7_KDMDBpEeyUlZFKI80e2g" next="_TEEwUDBqEeyUlZFKI80e2g">
              <guardedBranches xmi:id="_PL6zADBqEeyUlZFKI80e2g" name="Branch" firstStatement="_Lj1SADBqEeyUlZFKI80e2g" lastStatement="_Nh9yoDBqEeyUlZFKI80e2g"/>
              <guardedBranches xmi:id="_QYQqUDBqEeyUlZFKI80e2g" name="Branch2" firstStatement="_MUZzUDBqEeyUlZFKI80e2g" lastStatement="_N0peEDBqEeyUlZFKI80e2g"/>
              <guardedBranches xmi:id="_xYP5cDBqEeyUlZFKI80e2g" name="Branch3" firstStatement="_vD_-4DBqEeyUlZFKI80e2g" lastStatement="_tVDJwDBqEeyUlZFKI80e2g"/>
              <guardedBranches xmi:id="_mr-FoA0kEe2Av5vOkNLtDA" name="Branch4" firstStatement="_jfY07g0kEe2Av5vOkNLtDA" lastStatement="_jfY05A0kEe2Av5vOkNLtDA"/>
            </statements>
            <statements xsi:type="cofluent:InputAction" xmi:id="_Lj1SADBqEeyUlZFKI80e2g" name="InAction" isFirstOf="_PL6zADBqEeyUlZFKI80e2g" next="_Nh9yoDBqEeyUlZFKI80e2g" port="_ReKtADBrEeyUlZFKI80e2g" timeout=" ns" priority="AtomQuad0_to_BUS_priority" duration=" ns" vectorSize="" blocking="true" condition=""/>
            <statements xsi:type="cofluent:InputAction" xmi:id="_MUZzUDBqEeyUlZFKI80e2g" name="InAction2" isFirstOf="_QYQqUDBqEeyUlZFKI80e2g" next="_N0peEDBqEeyUlZFKI80e2g" port="_sLYWgDBrEeyUlZFKI80e2g" timeout=" ns" priority="LLC_to_BUS_priority" duration=" ns" vectorSize="" blocking="true" condition=""/>
            <statements xsi:type="cofluent:Operation" xmi:id="_Nh9yoDBqEeyUlZFKI80e2g" name="Operation" isLastOf="_PL6zADBqEeyUlZFKI80e2g" previous="_Lj1SADBqEeyUlZFKI80e2g" algorithm="cf_trace_report(&quot;****** Reached 'operation' *****&quot;);&#xD;&#xA;frame = AtomQuad0_to_BUS;&#xD;&#xA;//cf_trace_report(&quot;frame.source: %d&quot;, frame.source);&#xD;&#xA;//cf_trace_report(&quot;frame.destination: %d&quot;, frame.destination);&#xD;&#xA;if (LOG_LEVEL == 1){&#xD;&#xA;cf_trace_report(&quot;UPLINK BUS and source: %d&quot;,frame.source);&#xD;&#xA;}&#xD;&#xA;message_size = AtomQuad0_to_BUS_trans.get_user_data_length();&#xD;&#xA;message_time_stamp = AtomQuad0_to_BUS_trans.get_time_stamp();" executionTime="0 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:Operation" xmi:id="_N0peEDBqEeyUlZFKI80e2g" name="Operation2" isLastOf="_QYQqUDBqEeyUlZFKI80e2g" previous="_MUZzUDBqEeyUlZFKI80e2g" algorithm="frame = LLC_to_BUS;&#xD;&#xA;if (LOG_LEVEL == 1){&#xD;&#xA;cf_trace_report(&quot;DOWNLINK BUS and destination: %d&quot;,frame.destination);&#xD;&#xA;}&#xD;&#xA;message_size = LLC_to_BUS_trans.get_user_data_length();&#xD;&#xA;message_time_stamp = LLC_to_BUS_trans.get_time_stamp();" executionTime="0 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:Operation" xmi:id="_TEEwUDBqEeyUlZFKI80e2g" name="transfer" previous="_EqO88DBqEeyUlZFKI80e2g" next="_WJ7uADBqEeyUlZFKI80e2g" executionTime="0 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:AlternativeStatement" xmi:id="_WJ7uADBqEeyUlZFKI80e2g" name="Alternative" isLastOf="_6Y-IgTBpEeyUlZFKI80e2g" previous="_TEEwUDBqEeyUlZFKI80e2g">
              <conditionalBranches xmi:id="_8P6mkDBqEeyUlZFKI80e2g" name="Branch" firstStatement="_1dlXIDBqEeyUlZFKI80e2g" lastStatement="_3BI0kDBqEeyUlZFKI80e2g" condition="frame.destination == LLC_MEMORY_FUNCTION_ID"/>
              <conditionalBranches xmi:id="_9YUZEDBqEeyUlZFKI80e2g" name="Branch2" firstStatement="_6oOQADBqEeyUlZFKI80e2g" lastStatement="_4kZ-IDBqEeyUlZFKI80e2g" condition="frame.destination == ATOMQUAD0_ID"/>
              <conditionalBranches xmi:id="_-Xy5EDBqEeyUlZFKI80e2g" name="Branch3" firstStatement="_67ejMDBqEeyUlZFKI80e2g" lastStatement="_5Z0jMDBqEeyUlZFKI80e2g" condition="frame.destination == ATOMQUAD1_ID"/>
              <conditionalBranches xmi:id="_YSw9EEezEeyrdaEjPOedsw" name="Branch4" isFirstOf="_YSw9EEezEeyrdaEjPOedsw" isLastOf="_YSw9EEezEeyrdaEjPOedsw" firstStatement="_YSw9EEezEeyrdaEjPOedsw" lastStatement="_YSw9EEezEeyrdaEjPOedsw"/>
              <conditionalBranches xmi:id="_9Hi60A0kEe2Av5vOkNLtDA" name="Branch5" firstStatement="_2Xaq1A0kEe2Av5vOkNLtDA" lastStatement="_2Xaq3g0kEe2Av5vOkNLtDA" condition="frame.destination == BIGCORE0_ID"/>
            </statements>
            <statements xsi:type="cofluent:Operation" xmi:id="_tVDJwDBqEeyUlZFKI80e2g" name="Operation3" isLastOf="_xYP5cDBqEeyUlZFKI80e2g" previous="_vD_-4DBqEeyUlZFKI80e2g" algorithm="frame = AtomQuad1_to_BUS;&#xD;&#xA;//cf_trace_report(&quot;DOWNLINK BUS and destination: %d&quot;,frame.destination);&#xD;&#xA;if (LOG_LEVEL == 1){&#xD;&#xA;cf_trace_report(&quot;UPLINK BUS and source: %d&quot;,frame.source);&#xD;&#xA;}&#xD;&#xA;message_size = AtomQuad1_to_BUS_trans.get_user_data_length();&#xD;&#xA;message_time_stamp = AtomQuad1_to_BUS_trans.get_time_stamp();" executionTime="0 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:InputAction" xmi:id="_vD_-4DBqEeyUlZFKI80e2g" name="InAction3" isFirstOf="_xYP5cDBqEeyUlZFKI80e2g" next="_tVDJwDBqEeyUlZFKI80e2g" port="_jTxAIDBsEeyUlZFKI80e2g" timeout=" ns" priority="AtomQuad1_to_BUS_priority" duration=" ns" vectorSize="" blocking="true" condition=""/>
            <statements xsi:type="cofluent:Operation" xmi:id="_1dlXIDBqEeyUlZFKI80e2g" name="Operation10" isFirstOf="_8P6mkDBqEeyUlZFKI80e2g" next="_3BI0kDBqEeyUlZFKI80e2g" algorithm="BUS_to_LLC = frame;&#xD;&#xA;//cf_trace_report(&quot;frame.destination: %d&quot;, frame.destination);&#xD;&#xA;BUS_to_LLC_trans.set_user_data_length(message_size);&#xD;&#xA;BUS_to_LLC_trans.set_time_stamp(message_time_stamp);&#xD;&#xA;//cf_trace_report(&quot;frame size at BUS uplink: %d&quot;,BUS_to_LLC_trans.get_user_data_length().to_scalar(CF_BYTE));" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:OutputAction" xmi:id="_3BI0kDBqEeyUlZFKI80e2g" name="OutAction" isLastOf="_8P6mkDBqEeyUlZFKI80e2g" previous="_1dlXIDBqEeyUlZFKI80e2g" port="_l5loUDBrEeyUlZFKI80e2g" duration=" ns" condition="" priority="" vectorSize="" blocking="true" call=""/>
            <statements xsi:type="cofluent:OutputAction" xmi:id="_4kZ-IDBqEeyUlZFKI80e2g" name="OutAction2" isLastOf="_9YUZEDBqEeyUlZFKI80e2g" previous="_6oOQADBqEeyUlZFKI80e2g" port="_WlHvUO2SEeyk8YlLdndsRA" duration=" ns" condition="" priority="" vectorSize="" blocking="true" call=""/>
            <statements xsi:type="cofluent:OutputAction" xmi:id="_5Z0jMDBqEeyUlZFKI80e2g" name="OutAction3" isLastOf="_-Xy5EDBqEeyUlZFKI80e2g" previous="_67ejMDBqEeyUlZFKI80e2g" port="_4y1V0O2SEeyVp--j9k5gbQ" duration=" ns" condition="" priority="" vectorSize="" blocking="true" call=""/>
            <statements xsi:type="cofluent:Operation" xmi:id="_6oOQADBqEeyUlZFKI80e2g" name="Operation11" isFirstOf="_9YUZEDBqEeyUlZFKI80e2g" next="_4kZ-IDBqEeyUlZFKI80e2g" algorithm="BUS_to_AtomQuad0 = frame;&#xD;&#xA;//cf_trace_report(&quot;frame.destination: %d&quot;, frame.destination);&#xD;&#xA;//cf_trace_report(&quot;DOWNLINK BUS and destination: %d&quot;,frame.destination);&#xD;&#xA;BUS_to_AtomQuad0_trans.set_user_data_length(message_size);&#xD;&#xA;BUS_to_AtomQuad0_trans.set_time_stamp(message_time_stamp);" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:Operation" xmi:id="_67ejMDBqEeyUlZFKI80e2g" name="Operation12" isFirstOf="_-Xy5EDBqEeyUlZFKI80e2g" next="_5Z0jMDBqEeyUlZFKI80e2g" algorithm="BUS_to_AtomQuad1 = frame;&#xD;&#xA;//cf_trace_report(&quot;frame.destination: %d&quot;, frame.destination);&#xD;&#xA;if (LOG_LEVEL == 1){&#xD;&#xA;cf_trace_report(&quot;DOWNLINK BUS and destination: %d&quot;,frame.destination);&#xD;&#xA;}&#xD;&#xA;BUS_to_AtomQuad1_trans.set_user_data_length(message_size);&#xD;&#xA;BUS_to_AtomQuad1_trans.set_time_stamp(message_time_stamp);" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:Operation" xmi:id="_jfY05A0kEe2Av5vOkNLtDA" name="Operation4" isLastOf="_mr-FoA0kEe2Av5vOkNLtDA" previous="_jfY07g0kEe2Av5vOkNLtDA" algorithm="frame = BigCore0_to_BUS;&#xD;&#xA;//cf_trace_report(&quot;DOWNLINK BUS and destination: %d&quot;,frame.destination);&#xD;&#xA;if (LOG_LEVEL == 1){&#xD;&#xA;cf_trace_report(&quot;UPLINK BUS and source: %d&quot;,frame.source);&#xD;&#xA;}&#xD;&#xA;message_size = BigCore0_to_BUS_trans.get_user_data_length();&#xD;&#xA;message_time_stamp = BigCore0_to_BUS_trans.get_time_stamp();" executionTime="0 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:InputAction" xmi:id="_jfY07g0kEe2Av5vOkNLtDA" name="InAction3_1" isFirstOf="_mr-FoA0kEe2Av5vOkNLtDA" next="_jfY05A0kEe2Av5vOkNLtDA" port="_IqoOYA0jEe2Av5vOkNLtDA" timeout=" ns" priority="BigCore0_to_BUS_priority" duration=" ns" vectorSize="" blocking="true" condition=""/>
            <statements xsi:type="cofluent:Operation" xmi:id="_2Xaq1A0kEe2Av5vOkNLtDA" name="Operation13" isFirstOf="_9Hi60A0kEe2Av5vOkNLtDA" next="_2Xaq3g0kEe2Av5vOkNLtDA" algorithm="BUS_to_BigCore0 = frame;&#xD;&#xA;//cf_trace_report(&quot;frame.destination: %d&quot;, frame.destination);&#xD;&#xA;if (LOG_LEVEL == 1){&#xD;&#xA;cf_trace_report(&quot;DOWNLINK BUS and destination: %d&quot;,frame.destination);&#xD;&#xA;}&#xD;&#xA;BUS_to_BigCore0_trans.set_user_data_length(message_size);&#xD;&#xA;BUS_to_BigCore0_trans.set_time_stamp(message_time_stamp);" executionTime="10 ns" dynamicDataSize="0 kB" dynamicPowerConsumption=" uW" dynamicResourceLoad=""/>
            <statements xsi:type="cofluent:OutputAction" xmi:id="_2Xaq3g0kEe2Av5vOkNLtDA" name="OutAction3_1" isLastOf="_9Hi60A0kEe2Av5vOkNLtDA" previous="_2Xaq1A0kEe2Av5vOkNLtDA" port="_JVP4sA0jEe2Av5vOkNLtDA" duration=" ns" condition="" priority="" vectorSize="" blocking="true" call=""/>
          </refinement>
        </models>
        <relations xsi:type="cofluent:MessageQueue" xmi:id="_AGiUsC9sEeyUlZFKI80e2g" name="AtomQuad0_to_BUS" ports="_J3sswC9sEeyUlZFKI80e2g _ReKtADBrEeyUlZFKI80e2g" capacity="1000" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD" cosimChiselDataPortBits="">
          <relationType xsi:type="cofluent:RelationDataType" xmi:id="_FOGrcC9sEeyUlZFKI80e2g" dataType="_SRBYgPlQEeuZqOfdZrWBTg"/>
        </relations>
        <relations xsi:type="cofluent:MessageQueue" xmi:id="_LUDQ8DBnEeyUlZFKI80e2g" name="AtomQuad1_to_BUS" ports="_NdtsIDBnEeyUlZFKI80e2g _jTxAIDBsEeyUlZFKI80e2g" capacity="1000" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD" cosimChiselDataPortBits="">
          <relationType xsi:type="cofluent:RelationDataType" xmi:id="_LUDQ8TBnEeyUlZFKI80e2g" dataType="_SRBYgPlQEeuZqOfdZrWBTg"/>
        </relations>
        <relations xsi:type="cofluent:MessageQueue" xmi:id="_imZZSTBrEeyUlZFKI80e2g" name="BUS_to_LLC" ports="_l5loUDBrEeyUlZFKI80e2g _m0w3IDBrEeyUlZFKI80e2g" capacity="1000" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD" cosimChiselDataPortBits="">
          <relationType xsi:type="cofluent:RelationDataType" xmi:id="_imZZSjBrEeyUlZFKI80e2g" dataType="_SRBYgPlQEeuZqOfdZrWBTg"/>
        </relations>
        <relations xsi:type="cofluent:MessageQueue" xmi:id="_onjqeTBrEeyUlZFKI80e2g" name="LLC_to_BUS" ports="_r0F34DBrEeyUlZFKI80e2g _sLYWgDBrEeyUlZFKI80e2g" capacity="1000" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD" cosimChiselDataPortBits="">
          <relationType xsi:type="cofluent:RelationDataType" xmi:id="_onjqejBrEeyUlZFKI80e2g" dataType="_SRBYgPlQEeuZqOfdZrWBTg"/>
        </relations>
        <relations xsi:type="cofluent:MessageQueue" xmi:id="_JOsgye2SEeyk8YlLdndsRA" name="BUS_to_AtomQuad0" ports="_WlHvUO2SEeyk8YlLdndsRA _XKhicO2SEeyk8YlLdndsRA" capacity="1000" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD" cosimChiselDataPortBits="">
          <relationType xsi:type="cofluent:RelationDataType" xmi:id="_JOsgyu2SEeyk8YlLdndsRA" dataType="_SRBYgPlQEeuZqOfdZrWBTg"/>
        </relations>
        <relations xsi:type="cofluent:MessageQueue" xmi:id="_1zqO-e2SEeyVp--j9k5gbQ" name="BUS_to_AtomQuad1" ports="_4y1V0O2SEeyVp--j9k5gbQ _5efh8O2SEeyVp--j9k5gbQ" capacity="1000" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD" cosimChiselDataPortBits="">
          <relationType xsi:type="cofluent:RelationDataType" xmi:id="_1zqO-u2SEeyVp--j9k5gbQ" dataType="_SRBYgPlQEeuZqOfdZrWBTg"/>
        </relations>
        <relations xsi:type="cofluent:MessageQueue" xmi:id="_C8gN-Q0jEe2Av5vOkNLtDA" name="BUS_to_BigCore0" ports="_JVP4sA0jEe2Av5vOkNLtDA _KAnJ4A0jEe2Av5vOkNLtDA" capacity="1000" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD" cosimChiselDataPortBits="">
          <relationType xsi:type="cofluent:RelationDataType" xmi:id="_C8gN-g0jEe2Av5vOkNLtDA" dataType="_SRBYgPlQEeuZqOfdZrWBTg"/>
        </relations>
        <relations xsi:type="cofluent:MessageQueue" xmi:id="_C8gOBA0jEe2Av5vOkNLtDA" name="BigCore0_to_BUS" ports="_INat8A0jEe2Av5vOkNLtDA _IqoOYA0jEe2Av5vOkNLtDA" capacity="1000" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD" cosimChiselDataPortBits="">
          <relationType xsi:type="cofluent:RelationDataType" xmi:id="_C8gOBQ0jEe2Av5vOkNLtDA" dataType="_SRBYgPlQEeuZqOfdZrWBTg"/>
        </relations>
      </refinement>
    </models>
    <models xsi:type="cofluent:RoutingFunction" xmi:id="_8nxYMDgFEeyiyOB-O-9_Fg" name="mess_route" target="" declarations="int core_num;&#xD;&#xA;public:&#xD;&#xA;&#x9;int core_route( int addr );&#xD;&#xA;" definitions="int cfm_mess_route::core_route( int addr)&#xD;&#xA;{  &#xD;&#xA;&#x9;//cf_trace_report(&quot;addr: %d&quot;,addr);&#xD;&#xA;&#x9;//MsgQ.addr = addr;&#xD;&#xA;&#x9;//p_mq_MsgQ.send( &amp;MsgQ_trans);&#xD;&#xA;&#x9;//cf_trace_report(&quot;*** ENTER CORE ROUTE ***&quot;);&#xD;&#xA;&#x9;core_num = addr;&#xD;&#xA;&#x9;if (LOG_LEVEL == 2){&#xD;&#xA;&#x9;cf_trace_report(&quot;*** ENTER CORE ROUTE with core_num: %d ***&quot;,core_num);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return core_num;&#xD;&#xA;}&#xD;&#xA;" initializations="core_num = 0;" includeInheritedHeader="" inheritanceClass="" callToInheritedConstructors="" cyclePeriod=" ns" affinity="" priority="0" schedulingPolicy="FIFO" InterfaceBlockingBehavior="RELEASE_CORE" timeSlicePeriod="10 ms" staticCodeSize="0 kB" staticDataSize="0 kB" staticPowerConsumption="0 uW" dynamicPowerConsumption="0 uW" cost="0 USD" dynamicResourceLoad="100" destination="if (LOG_LEVEL == 0){&#xD;&#xA;cf_trace_report(&quot;core_num: %d&quot;,core_num);&#xD;&#xA;}&#xD;&#xA;if (core_num == 100){&#xD;&#xA;//cf_trace_report(&quot;router output 'AtomQuad0'&quot;);&#xD;&#xA;return RoutingTable.Output[0];&#xD;&#xA;} if (core_num == 200) {&#xD;&#xA;return RoutingTable.Output[1];&#xD;&#xA;} if (core_num == 300) {&#xD;&#xA;return RoutingTable.Output[2];&#xD;&#xA;} if (core_num == 400) {&#xD;&#xA;return RoutingTable.Output[3];&#xD;&#xA;}&#xD;&#xA;//for (int i=0; i&lt;2; i++)&#xD;&#xA;//{&#xD;&#xA;//if (source_name == RoutingTable.Input[i])&#xD;&#xA;//return RoutingTable.Output[i];&#xD;&#xA;//}" concurrency="1" routingTime=" ns">
      <ports xmi:id="_HxO_8DgGEeyiyOB-O-9_Fg" name="Decoding_Routing" type="MESSAGE_QUEUE" direction="IN" relations="_AienoC9dEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
        <constructorArguments></constructorArguments>
        <templateArguments></templateArguments>
      </ports>
      <ports xmi:id="_IQ-P8DgGEeyiyOB-O-9_Fg" name="Scaling_Routing" type="MESSAGE_QUEUE" direction="IN" relations="_qtZu6TBmEeyUlZFKI80e2g" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
        <constructorArguments></constructorArguments>
        <templateArguments></templateArguments>
      </ports>
      <ports xmi:id="_Io95MDgGEeyiyOB-O-9_Fg" name="Routing_AtomQuad0" type="MESSAGE_QUEUE" direction="OUT" relations="_ADa_uTgGEeyiyOB-O-9_Fg" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
        <constructorArguments></constructorArguments>
        <templateArguments></templateArguments>
      </ports>
      <ports xmi:id="_JSPfsDgGEeyiyOB-O-9_Fg" name="Routing_AtomQuad1" type="MESSAGE_QUEUE" direction="OUT" relations="_Fhl4mTgGEeyiyOB-O-9_Fg" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
        <constructorArguments></constructorArguments>
        <templateArguments></templateArguments>
      </ports>
      <ports xmi:id="_Y4LtAA0hEe2Av5vOkNLtDA" name="Routing_BigCore0" type="MESSAGE_QUEUE" direction="OUT" relations="_VAOkCQ0hEe2Av5vOkNLtDA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
        <constructorArguments></constructorArguments>
        <templateArguments></templateArguments>
      </ports>
      <ports xmi:id="_W1OIAA0nEe2Av5vOkNLtDA" name="Routing_BigCore1" type="MESSAGE_QUEUE" direction="OUT" relations="_UjfV-Q0nEe2Av5vOkNLtDA" size="" synchronizeName="true" vector="false" requestPipelineDepth="1">
        <constructorArguments></constructorArguments>
        <templateArguments></templateArguments>
      </ports>
    </models>
    <relations xsi:type="cofluent:MessageQueue" xmi:id="_Uu60wPlEEeuZqOfdZrWBTg" name="MsgQ" ports="_aaNjoPlEEeuZqOfdZrWBTg _a9iTIPlEEeuZqOfdZrWBTg" capacity="1" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD">
      <relationType xsi:type="cofluent:RelationDataType" xmi:id="_SRBYgflQEeuZqOfdZrWBTg" dataType="_SRBYgPlQEeuZqOfdZrWBTg"/>
    </relations>
    <relations xsi:type="cofluent:MessageQueue" xmi:id="_ZEPPMPlEEeuZqOfdZrWBTg" name="MsgQ2" ports="_gILzEPlEEeuZqOfdZrWBTg _iXPEkPlEEeuZqOfdZrWBTg" capacity="1" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD">
      <relationType xsi:type="cofluent:RelationDataType" xmi:id="_YxgC8PlQEeuZqOfdZrWBTg" dataType="_SRBYgPlQEeuZqOfdZrWBTg"/>
    </relations>
    <relations xsi:type="cofluent:MessageQueue" xmi:id="_AienoC9dEeyUlZFKI80e2g" name="Decoding_Routing" ports="_C6BGwC9dEeyUlZFKI80e2g _HxO_8DgGEeyiyOB-O-9_Fg" capacity="1000" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD" cosimChiselDataPortBits="">
      <relationType xsi:type="cofluent:RelationDataType" xmi:id="_BYDkwC9dEeyUlZFKI80e2g" dataType="_SRBYgPlQEeuZqOfdZrWBTg"/>
    </relations>
    <relations xsi:type="cofluent:MessageQueue" xmi:id="_qtZu6TBmEeyUlZFKI80e2g" name="Scaling_Routing" ports="_tx9sEDBmEeyUlZFKI80e2g _IQ-P8DgGEeyiyOB-O-9_Fg" capacity="1000" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD" cosimChiselDataPortBits="">
      <relationType xsi:type="cofluent:RelationDataType" xmi:id="_qtZu6jBmEeyUlZFKI80e2g" dataType="_SRBYgPlQEeuZqOfdZrWBTg"/>
    </relations>
    <relations xsi:type="cofluent:MessageQueue" xmi:id="_ADa_uTgGEeyiyOB-O-9_Fg" name="Routing_AtomQuad0" ports="_Io95MDgGEeyiyOB-O-9_Fg _Fny7oC9dEeyUlZFKI80e2g" capacity="1000" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD">
      <relationType xsi:type="cofluent:RelationDataType" xmi:id="_ADa_ujgGEeyiyOB-O-9_Fg" dataType="_SRBYgPlQEeuZqOfdZrWBTg"/>
    </relations>
    <relations xsi:type="cofluent:MessageQueue" xmi:id="_Fhl4mTgGEeyiyOB-O-9_Fg" name="Routing_AtomQuad1" ports="_JSPfsDgGEeyiyOB-O-9_Fg _uhqqsDBmEeyUlZFKI80e2g" capacity="1000" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD">
      <relationType xsi:type="cofluent:RelationDataType" xmi:id="_Fhl4mjgGEeyiyOB-O-9_Fg" dataType="_SRBYgPlQEeuZqOfdZrWBTg"/>
    </relations>
    <relations xsi:type="cofluent:MessageQueue" xmi:id="_VAOkCQ0hEe2Av5vOkNLtDA" name="Routing_BigCore0" ports="_Y4LtAA0hEe2Av5vOkNLtDA _ZmQ7AA0hEe2Av5vOkNLtDA" capacity="1000" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD">
      <relationType xsi:type="cofluent:RelationDataType" xmi:id="_VAOkCg0hEe2Av5vOkNLtDA" dataType="_SRBYgPlQEeuZqOfdZrWBTg"/>
    </relations>
    <relations xsi:type="cofluent:MessageQueue" xmi:id="_UjfV-Q0nEe2Av5vOkNLtDA" name="Routing_BigCore1" ports="_W1OIAA0nEe2Av5vOkNLtDA _XLujgA0nEe2Av5vOkNLtDA" capacity="1000" concurrency="1" concurrencyManagement="FULL" sendTime="1 ns" receiveTime="1 ns" sendThreshold="1" receiveThreshold="1" address="" mask="" messageQueueType="STANDARD">
      <relationType xsi:type="cofluent:RelationDataType" xmi:id="_UjfV-g0nEe2Av5vOkNLtDA" dataType="_SRBYgPlQEeuZqOfdZrWBTg"/>
    </relations>
  </refinement>
</cofluent:Application>
